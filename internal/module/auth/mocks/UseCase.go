// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	body "murakali/internal/module/auth/delivery/body"

	mock "github.com/stretchr/testify/mock"

	model "murakali/internal/model"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// CheckUniquePhoneNo provides a mock function with given fields: ctx, phoneNo
func (_m *UseCase) CheckUniquePhoneNo(ctx context.Context, phoneNo string) (bool, error) {
	ret := _m.Called(ctx, phoneNo)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, phoneNo)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, phoneNo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckUniqueUsername provides a mock function with given fields: ctx, username
func (_m *UseCase) CheckUniqueUsername(ctx context.Context, username string) (bool, error) {
	ret := _m.Called(ctx, username)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GoogleAuth provides a mock function with given fields: ctx, code, state
func (_m *UseCase) GoogleAuth(ctx context.Context, code string, state string) (*model.GoogleAuthToken, error) {
	ret := _m.Called(ctx, code, state)

	var r0 *model.GoogleAuthToken
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.GoogleAuthToken); ok {
		r0 = rf(ctx, code, state)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GoogleAuthToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, code, state)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, _a1
func (_m *UseCase) Login(ctx context.Context, _a1 body.LoginRequest) (*model.Token, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *model.Token
	if rf, ok := ret.Get(0).(func(context.Context, body.LoginRequest) *model.Token); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, body.LoginRequest) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshToken provides a mock function with given fields: ctx, refreshToken, id
func (_m *UseCase) RefreshToken(ctx context.Context, refreshToken string, id string) (*model.AccessToken, error) {
	ret := _m.Called(ctx, refreshToken, id)

	var r0 *model.AccessToken
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.AccessToken); ok {
		r0 = rf(ctx, refreshToken, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AccessToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, refreshToken, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterEmail provides a mock function with given fields: ctx, _a1
func (_m *UseCase) RegisterEmail(ctx context.Context, _a1 body.RegisterEmailRequest) (*model.User, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, body.RegisterEmailRequest) *model.User); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, body.RegisterEmailRequest) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: ctx, email, _a2
func (_m *UseCase) RegisterUser(ctx context.Context, email string, _a2 body.RegisterUserRequest) error {
	ret := _m.Called(ctx, email, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, body.RegisterUserRequest) error); ok {
		r0 = rf(ctx, email, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResetPasswordEmail provides a mock function with given fields: ctx, _a1
func (_m *UseCase) ResetPasswordEmail(ctx context.Context, _a1 body.ResetPasswordEmailRequest) (*model.User, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, body.ResetPasswordEmailRequest) *model.User); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, body.ResetPasswordEmailRequest) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetPasswordUser provides a mock function with given fields: ctx, email, _a2
func (_m *UseCase) ResetPasswordUser(ctx context.Context, email string, _a2 *body.ResetPasswordUserRequest) (*model.User, error) {
	ret := _m.Called(ctx, email, _a2)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, string, *body.ResetPasswordUserRequest) *model.User); ok {
		r0 = rf(ctx, email, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *body.ResetPasswordUserRequest) error); ok {
		r1 = rf(ctx, email, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetPasswordVerifyOTP provides a mock function with given fields: ctx, _a1
func (_m *UseCase) ResetPasswordVerifyOTP(ctx context.Context, _a1 body.ResetPasswordVerifyOTPRequest) (string, error) {
	ret := _m.Called(ctx, _a1)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, body.ResetPasswordVerifyOTPRequest) string); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, body.ResetPasswordVerifyOTPRequest) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyOTP provides a mock function with given fields: ctx, _a1
func (_m *UseCase) VerifyOTP(ctx context.Context, _a1 body.VerifyOTPRequest) (string, error) {
	ret := _m.Called(ctx, _a1)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, body.VerifyOTPRequest) string); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, body.VerifyOTPRequest) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCase(t mockConstructorTestingTNewUseCase) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
