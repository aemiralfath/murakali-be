// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "murakali/internal/model"

	mock "github.com/stretchr/testify/mock"

	postgre "murakali/pkg/postgre"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CheckEmailHistory provides a mock function with given fields: ctx, email
func (_m *Repository) CheckEmailHistory(ctx context.Context, email string) (*model.EmailHistory, error) {
	ret := _m.Called(ctx, email)

	var r0 *model.EmailHistory
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.EmailHistory); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.EmailHistory)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEmailHistory provides a mock function with given fields: ctx, tx, email
func (_m *Repository) CreateEmailHistory(ctx context.Context, tx postgre.Transaction, email string) error {
	ret := _m.Called(ctx, tx, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, string) error); ok {
		r0 = rf(ctx, tx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: ctx, email
func (_m *Repository) CreateUser(ctx context.Context, email string) (*model.User, error) {
	ret := _m.Called(ctx, email)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserGoogle provides a mock function with given fields: ctx, tx, user
func (_m *Repository) CreateUserGoogle(ctx context.Context, tx postgre.Transaction, user *model.User) (*model.User, error) {
	ret := _m.Called(ctx, tx, user)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, *model.User) *model.User); ok {
		r0 = rf(ctx, tx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, postgre.Transaction, *model.User) error); ok {
		r1 = rf(ctx, tx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOTPValue provides a mock function with given fields: ctx, email
func (_m *Repository) DeleteOTPValue(ctx context.Context, email string) (int64, error) {
	ret := _m.Called(ctx, email)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOTPHashedValue provides a mock function with given fields: ctx, hashedOTP
func (_m *Repository) GetOTPHashedValue(ctx context.Context, hashedOTP string) (string, error) {
	ret := _m.Called(ctx, hashedOTP)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, hashedOTP)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, hashedOTP)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOTPValue provides a mock function with given fields: ctx, email
func (_m *Repository) GetOTPValue(ctx context.Context, email string) (string, error) {
	ret := _m.Called(ctx, email)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSessionKeyRedis provides a mock function with given fields: ctx, key
func (_m *Repository) GetSessionKeyRedis(ctx context.Context, key string) ([]string, error) {
	ret := _m.Called(ctx, key)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSessionRedis provides a mock function with given fields: ctx, key
func (_m *Repository) GetSessionRedis(ctx context.Context, key string) (string, error) {
	ret := _m.Called(ctx, key)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *Repository) GetUserByEmail(ctx context.Context, email string) (*model.User, error) {
	ret := _m.Called(ctx, email)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *Repository) GetUserByID(ctx context.Context, id string) (*model.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByPhoneNo provides a mock function with given fields: ctx, phoneNo
func (_m *Repository) GetUserByPhoneNo(ctx context.Context, phoneNo string) (*model.User, error) {
	ret := _m.Called(ctx, phoneNo)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, phoneNo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, phoneNo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUsername provides a mock function with given fields: ctx, username
func (_m *Repository) GetUserByUsername(ctx context.Context, username string) (*model.User, error) {
	ret := _m.Called(ctx, username)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertNewOTPHashedKey provides a mock function with given fields: ctx, hashedOTP, email, otp
func (_m *Repository) InsertNewOTPHashedKey(ctx context.Context, hashedOTP string, email string, otp string) error {
	ret := _m.Called(ctx, hashedOTP, email, otp)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, hashedOTP, email, otp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertNewOTPKey provides a mock function with given fields: ctx, email, otp
func (_m *Repository) InsertNewOTPKey(ctx context.Context, email string, otp string) error {
	ret := _m.Called(ctx, email, otp)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, otp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertSessionRedis provides a mock function with given fields: ctx, duration, key, status
func (_m *Repository) InsertSessionRedis(ctx context.Context, duration int, key string, status string) error {
	ret := _m.Called(ctx, duration, key, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, string) error); ok {
		r0 = rf(ctx, duration, key, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePassword provides a mock function with given fields: ctx, user, password
func (_m *Repository) UpdatePassword(ctx context.Context, user *model.User, password string) (*model.User, error) {
	ret := _m.Called(ctx, user, password)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, *model.User, string) *model.User); ok {
		r0 = rf(ctx, user, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.User, string) error); ok {
		r1 = rf(ctx, user, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, tx, user
func (_m *Repository) UpdateUser(ctx context.Context, tx postgre.Transaction, user *model.User) error {
	ret := _m.Called(ctx, tx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, *model.User) error); ok {
		r0 = rf(ctx, tx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
