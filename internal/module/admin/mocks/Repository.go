// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	body "murakali/internal/module/admin/delivery/body"

	mock "github.com/stretchr/testify/mock"

	model "murakali/internal/model"

	pagination "murakali/pkg/pagination"

	postgre "murakali/pkg/postgre"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddBanner provides a mock function with given fields: ctx, requestBody
func (_m *Repository) AddBanner(ctx context.Context, requestBody body.BannerRequest) error {
	ret := _m.Called(ctx, requestBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, body.BannerRequest) error); ok {
		r0 = rf(ctx, requestBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddCategory provides a mock function with given fields: ctx, requestBody
func (_m *Repository) AddCategory(ctx context.Context, requestBody body.CategoryRequest) error {
	ret := _m.Called(ctx, requestBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, body.CategoryRequest) error); ok {
		r0 = rf(ctx, requestBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CountCategoryParent provides a mock function with given fields: ctx, userid
func (_m *Repository) CountCategoryParent(ctx context.Context, userid string) (int, error) {
	ret := _m.Called(ctx, userid)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, userid)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountCodeVoucher provides a mock function with given fields: ctx, code
func (_m *Repository) CountCodeVoucher(ctx context.Context, code string) (int64, error) {
	ret := _m.Called(ctx, code)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, code)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountProductCategory provides a mock function with given fields: ctx, userid
func (_m *Repository) CountProductCategory(ctx context.Context, userid string) (int, error) {
	ret := _m.Called(ctx, userid)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, userid)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVoucher provides a mock function with given fields: ctx, voucherShop
func (_m *Repository) CreateVoucher(ctx context.Context, voucherShop *model.Voucher) error {
	ret := _m.Called(ctx, voucherShop)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Voucher) error); ok {
		r0 = rf(ctx, voucherShop)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBanner provides a mock function with given fields: ctx, bannerID
func (_m *Repository) DeleteBanner(ctx context.Context, bannerID string) error {
	ret := _m.Called(ctx, bannerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, bannerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCategory provides a mock function with given fields: ctx, categoryID
func (_m *Repository) DeleteCategory(ctx context.Context, categoryID string) error {
	ret := _m.Called(ctx, categoryID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, categoryID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteVoucher provides a mock function with given fields: ctx, voucherID
func (_m *Repository) DeleteVoucher(ctx context.Context, voucherID string) error {
	ret := _m.Called(ctx, voucherID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, voucherID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditBanner provides a mock function with given fields: ctx, requestBody
func (_m *Repository) EditBanner(ctx context.Context, requestBody body.BannerIDRequest) error {
	ret := _m.Called(ctx, requestBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, body.BannerIDRequest) error); ok {
		r0 = rf(ctx, requestBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditCategory provides a mock function with given fields: ctx, requestBody
func (_m *Repository) EditCategory(ctx context.Context, requestBody body.CategoryRequest) error {
	ret := _m.Called(ctx, requestBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, body.CategoryRequest) error); ok {
		r0 = rf(ctx, requestBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllVoucher provides a mock function with given fields: ctx, voucherStatusID, sortFilter, pgn
func (_m *Repository) GetAllVoucher(ctx context.Context, voucherStatusID string, sortFilter string, pgn *pagination.Pagination) ([]*model.Voucher, error) {
	ret := _m.Called(ctx, voucherStatusID, sortFilter, pgn)

	var r0 []*model.Voucher
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *pagination.Pagination) []*model.Voucher); ok {
		r0 = rf(ctx, voucherStatusID, sortFilter, pgn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Voucher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *pagination.Pagination) error); ok {
		r1 = rf(ctx, voucherStatusID, sortFilter, pgn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBanner provides a mock function with given fields: ctx
func (_m *Repository) GetBanner(ctx context.Context) ([]*body.BannerResponse, error) {
	ret := _m.Called(ctx)

	var r0 []*body.BannerResponse
	if rf, ok := ret.Get(0).(func(context.Context) []*body.BannerResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*body.BannerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategories provides a mock function with given fields: ctx
func (_m *Repository) GetCategories(ctx context.Context) ([]*body.CategoryResponse, error) {
	ret := _m.Called(ctx)

	var r0 []*body.CategoryResponse
	if rf, ok := ret.Get(0).(func(context.Context) []*body.CategoryResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*body.CategoryResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderByID provides a mock function with given fields: ctx, orderID
func (_m *Repository) GetOrderByID(ctx context.Context, orderID string) (*model.OrderModel, error) {
	ret := _m.Called(ctx, orderID)

	var r0 *model.OrderModel
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.OrderModel); ok {
		r0 = rf(ctx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OrderModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderItemsByOrderID provides a mock function with given fields: ctx, tx, orderID
func (_m *Repository) GetOrderItemsByOrderID(ctx context.Context, tx postgre.Transaction, orderID string) ([]*model.OrderItem, error) {
	ret := _m.Called(ctx, tx, orderID)

	var r0 []*model.OrderItem
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, string) []*model.OrderItem); ok {
		r0 = rf(ctx, tx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.OrderItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, postgre.Transaction, string) error); ok {
		r1 = rf(ctx, tx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductDetailByID provides a mock function with given fields: ctx, tx, productDetailID
func (_m *Repository) GetProductDetailByID(ctx context.Context, tx postgre.Transaction, productDetailID string) (*model.ProductDetail, error) {
	ret := _m.Called(ctx, tx, productDetailID)

	var r0 *model.ProductDetail
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, string) *model.ProductDetail); ok {
		r0 = rf(ctx, tx, productDetailID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, postgre.Transaction, string) error); ok {
		r1 = rf(ctx, tx, productDetailID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRefundByID provides a mock function with given fields: ctx, refundID
func (_m *Repository) GetRefundByID(ctx context.Context, refundID string) (*model.Refund, error) {
	ret := _m.Called(ctx, refundID)

	var r0 *model.Refund
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Refund); ok {
		r0 = rf(ctx, refundID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Refund)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refundID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRefunds provides a mock function with given fields: ctx, sortFilter, pgn
func (_m *Repository) GetRefunds(ctx context.Context, sortFilter string, pgn *pagination.Pagination) ([]*model.RefundOrder, error) {
	ret := _m.Called(ctx, sortFilter, pgn)

	var r0 []*model.RefundOrder
	if rf, ok := ret.Get(0).(func(context.Context, string, *pagination.Pagination) []*model.RefundOrder); ok {
		r0 = rf(ctx, sortFilter, pgn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.RefundOrder)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *pagination.Pagination) error); ok {
		r1 = rf(ctx, sortFilter, pgn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalRefunds provides a mock function with given fields: ctx
func (_m *Repository) GetTotalRefunds(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalVoucher provides a mock function with given fields: ctx, voucherStatusID
func (_m *Repository) GetTotalVoucher(ctx context.Context, voucherStatusID string) (int64, error) {
	ret := _m.Called(ctx, voucherStatusID)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, voucherStatusID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, voucherStatusID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoucherByID provides a mock function with given fields: ctx, voucherID
func (_m *Repository) GetVoucherByID(ctx context.Context, voucherID string) (*model.Voucher, error) {
	ret := _m.Called(ctx, voucherID)

	var r0 *model.Voucher
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Voucher); ok {
		r0 = rf(ctx, voucherID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Voucher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, voucherID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWalletByUserID provides a mock function with given fields: ctx, tx, userID
func (_m *Repository) GetWalletByUserID(ctx context.Context, tx postgre.Transaction, userID string) (*model.Wallet, error) {
	ret := _m.Called(ctx, tx, userID)

	var r0 *model.Wallet
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, string) *model.Wallet); ok {
		r0 = rf(ctx, tx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, postgre.Transaction, string) error); ok {
		r1 = rf(ctx, tx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertWalletHistory provides a mock function with given fields: ctx, tx, walletHistory
func (_m *Repository) InsertWalletHistory(ctx context.Context, tx postgre.Transaction, walletHistory *model.WalletHistory) error {
	ret := _m.Called(ctx, tx, walletHistory)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, *model.WalletHistory) error); ok {
		r0 = rf(ctx, tx, walletHistory)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrderStatus provides a mock function with given fields: ctx, tx, order
func (_m *Repository) UpdateOrderStatus(ctx context.Context, tx postgre.Transaction, order *model.OrderModel) error {
	ret := _m.Called(ctx, tx, order)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, *model.OrderModel) error); ok {
		r0 = rf(ctx, tx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProductDetailStock provides a mock function with given fields: ctx, tx, productDetailData
func (_m *Repository) UpdateProductDetailStock(ctx context.Context, tx postgre.Transaction, productDetailData *model.ProductDetail) error {
	ret := _m.Called(ctx, tx, productDetailData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, *model.ProductDetail) error); ok {
		r0 = rf(ctx, tx, productDetailData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRefund provides a mock function with given fields: ctx, tx, refund
func (_m *Repository) UpdateRefund(ctx context.Context, tx postgre.Transaction, refund *model.Refund) error {
	ret := _m.Called(ctx, tx, refund)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, *model.Refund) error); ok {
		r0 = rf(ctx, tx, refund)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateVoucher provides a mock function with given fields: ctx, voucherShop
func (_m *Repository) UpdateVoucher(ctx context.Context, voucherShop *model.Voucher) error {
	ret := _m.Called(ctx, voucherShop)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Voucher) error); ok {
		r0 = rf(ctx, voucherShop)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWalletBalance provides a mock function with given fields: ctx, tx, wallet
func (_m *Repository) UpdateWalletBalance(ctx context.Context, tx postgre.Transaction, wallet *model.Wallet) error {
	ret := _m.Called(ctx, tx, wallet)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, *model.Wallet) error); ok {
		r0 = rf(ctx, tx, wallet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
