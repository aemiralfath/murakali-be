// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	body "murakali/internal/module/admin/delivery/body"

	mock "github.com/stretchr/testify/mock"

	model "murakali/internal/model"

	pagination "murakali/pkg/pagination"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// AddBanner provides a mock function with given fields: ctx, requestBody
func (_m *UseCase) AddBanner(ctx context.Context, requestBody body.BannerRequest) error {
	ret := _m.Called(ctx, requestBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, body.BannerRequest) error); ok {
		r0 = rf(ctx, requestBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddCategory provides a mock function with given fields: ctx, requestBody
func (_m *UseCase) AddCategory(ctx context.Context, requestBody body.CategoryRequest) error {
	ret := _m.Called(ctx, requestBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, body.CategoryRequest) error); ok {
		r0 = rf(ctx, requestBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateVoucher provides a mock function with given fields: ctx, requestBody
func (_m *UseCase) CreateVoucher(ctx context.Context, requestBody body.CreateVoucherRequest) error {
	ret := _m.Called(ctx, requestBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, body.CreateVoucherRequest) error); ok {
		r0 = rf(ctx, requestBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBanner provides a mock function with given fields: ctx, bannerID
func (_m *UseCase) DeleteBanner(ctx context.Context, bannerID string) error {
	ret := _m.Called(ctx, bannerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, bannerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCategory provides a mock function with given fields: ctx, categoryID
func (_m *UseCase) DeleteCategory(ctx context.Context, categoryID string) error {
	ret := _m.Called(ctx, categoryID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, categoryID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteVoucher provides a mock function with given fields: ctx, voucherID
func (_m *UseCase) DeleteVoucher(ctx context.Context, voucherID string) error {
	ret := _m.Called(ctx, voucherID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, voucherID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditBanner provides a mock function with given fields: ctx, requestBody
func (_m *UseCase) EditBanner(ctx context.Context, requestBody body.BannerIDRequest) error {
	ret := _m.Called(ctx, requestBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, body.BannerIDRequest) error); ok {
		r0 = rf(ctx, requestBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditCategory provides a mock function with given fields: ctx, requestBody
func (_m *UseCase) EditCategory(ctx context.Context, requestBody body.CategoryRequest) error {
	ret := _m.Called(ctx, requestBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, body.CategoryRequest) error); ok {
		r0 = rf(ctx, requestBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllVoucher provides a mock function with given fields: ctx, voucherStatusID, sortFilter, pgn
func (_m *UseCase) GetAllVoucher(ctx context.Context, voucherStatusID string, sortFilter string, pgn *pagination.Pagination) (*pagination.Pagination, error) {
	ret := _m.Called(ctx, voucherStatusID, sortFilter, pgn)

	var r0 *pagination.Pagination
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *pagination.Pagination) *pagination.Pagination); ok {
		r0 = rf(ctx, voucherStatusID, sortFilter, pgn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pagination.Pagination)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *pagination.Pagination) error); ok {
		r1 = rf(ctx, voucherStatusID, sortFilter, pgn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBanner provides a mock function with given fields: ctx
func (_m *UseCase) GetBanner(ctx context.Context) ([]*body.BannerResponse, error) {
	ret := _m.Called(ctx)

	var r0 []*body.BannerResponse
	if rf, ok := ret.Get(0).(func(context.Context) []*body.BannerResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*body.BannerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategories provides a mock function with given fields: ctx
func (_m *UseCase) GetCategories(ctx context.Context) ([]*body.CategoryResponse, error) {
	ret := _m.Called(ctx)

	var r0 []*body.CategoryResponse
	if rf, ok := ret.Get(0).(func(context.Context) []*body.CategoryResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*body.CategoryResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDetailVoucher provides a mock function with given fields: ctx, voucherID
func (_m *UseCase) GetDetailVoucher(ctx context.Context, voucherID string) (*model.Voucher, error) {
	ret := _m.Called(ctx, voucherID)

	var r0 *model.Voucher
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Voucher); ok {
		r0 = rf(ctx, voucherID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Voucher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, voucherID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRefunds provides a mock function with given fields: ctx, sortFilter, pgn
func (_m *UseCase) GetRefunds(ctx context.Context, sortFilter string, pgn *pagination.Pagination) (*pagination.Pagination, error) {
	ret := _m.Called(ctx, sortFilter, pgn)

	var r0 *pagination.Pagination
	if rf, ok := ret.Get(0).(func(context.Context, string, *pagination.Pagination) *pagination.Pagination); ok {
		r0 = rf(ctx, sortFilter, pgn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pagination.Pagination)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *pagination.Pagination) error); ok {
		r1 = rf(ctx, sortFilter, pgn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefundOrder provides a mock function with given fields: ctx, refundID
func (_m *UseCase) RefundOrder(ctx context.Context, refundID string) error {
	ret := _m.Called(ctx, refundID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, refundID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateVoucher provides a mock function with given fields: ctx, requestBody
func (_m *UseCase) UpdateVoucher(ctx context.Context, requestBody body.UpdateVoucherRequest) error {
	ret := _m.Called(ctx, requestBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, body.UpdateVoucherRequest) error); ok {
		r0 = rf(ctx, requestBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCase(t mockConstructorTestingTNewUseCase) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
