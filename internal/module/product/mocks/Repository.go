// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	body "murakali/internal/module/product/delivery/body"

	mock "github.com/stretchr/testify/mock"

	model "murakali/internal/model"

	pagination "murakali/pkg/pagination"

	postgre "murakali/pkg/postgre"

	uuid "github.com/google/uuid"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CountSpecificFavoriteProduct provides a mock function with given fields: ctx, productID
func (_m *Repository) CountSpecificFavoriteProduct(ctx context.Context, productID string) (int64, error) {
	ret := _m.Called(ctx, productID)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, productID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountUserFavoriteProduct provides a mock function with given fields: ctx, userID, productID
func (_m *Repository) CountUserFavoriteProduct(ctx context.Context, userID string, productID string) (int64, error) {
	ret := _m.Called(ctx, userID, productID)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int64); ok {
		r0 = rf(ctx, userID, productID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFavoriteProduct provides a mock function with given fields: ctx, tx, userID, productID
func (_m *Repository) CreateFavoriteProduct(ctx context.Context, tx postgre.Transaction, userID string, productID string) error {
	ret := _m.Called(ctx, tx, userID, productID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, string, string) error); ok {
		r0 = rf(ctx, tx, userID, productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePhoto provides a mock function with given fields: ctx, tx, productDetailID, url
func (_m *Repository) CreatePhoto(ctx context.Context, tx postgre.Transaction, productDetailID string, url string) error {
	ret := _m.Called(ctx, tx, productDetailID, url)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, string, string) error); ok {
		r0 = rf(ctx, tx, productDetailID, url)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateProduct provides a mock function with given fields: ctx, tx, requestBody
func (_m *Repository) CreateProduct(ctx context.Context, tx postgre.Transaction, requestBody body.CreateProductInfoForQuery) (string, error) {
	ret := _m.Called(ctx, tx, requestBody)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, body.CreateProductInfoForQuery) string); ok {
		r0 = rf(ctx, tx, requestBody)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, postgre.Transaction, body.CreateProductInfoForQuery) error); ok {
		r1 = rf(ctx, tx, requestBody)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProductDetail provides a mock function with given fields: ctx, tx, requestBody, ProductID
func (_m *Repository) CreateProductDetail(ctx context.Context, tx postgre.Transaction, requestBody body.CreateProductDetailRequest, ProductID string) (string, error) {
	ret := _m.Called(ctx, tx, requestBody, ProductID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, body.CreateProductDetailRequest, string) string); ok {
		r0 = rf(ctx, tx, requestBody, ProductID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, postgre.Transaction, body.CreateProductDetailRequest, string) error); ok {
		r1 = rf(ctx, tx, requestBody, ProductID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProductReview provides a mock function with given fields: ctx, tx, userID, reqBody
func (_m *Repository) CreateProductReview(ctx context.Context, tx postgre.Transaction, userID string, reqBody body.ReviewProductRequest) error {
	ret := _m.Called(ctx, tx, userID, reqBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, string, body.ReviewProductRequest) error); ok {
		r0 = rf(ctx, tx, userID, reqBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateVariant provides a mock function with given fields: ctx, tx, productDetailID, variantDetailID
func (_m *Repository) CreateVariant(ctx context.Context, tx postgre.Transaction, productDetailID string, variantDetailID string) error {
	ret := _m.Called(ctx, tx, productDetailID, variantDetailID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, string, string) error); ok {
		r0 = rf(ctx, tx, productDetailID, variantDetailID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateVariantDetail provides a mock function with given fields: ctx, tx, requestBody
func (_m *Repository) CreateVariantDetail(ctx context.Context, tx postgre.Transaction, requestBody body.VariantDetailRequest) (string, error) {
	ret := _m.Called(ctx, tx, requestBody)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, body.VariantDetailRequest) string); ok {
		r0 = rf(ctx, tx, requestBody)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, postgre.Transaction, body.VariantDetailRequest) error); ok {
		r1 = rf(ctx, tx, requestBody)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFavoriteProduct provides a mock function with given fields: ctx, tx, userID, productID
func (_m *Repository) DeleteFavoriteProduct(ctx context.Context, tx postgre.Transaction, userID string, productID string) error {
	ret := _m.Called(ctx, tx, userID, productID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, string, string) error); ok {
		r0 = rf(ctx, tx, userID, productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePhoto provides a mock function with given fields: ctx, tx, productDetailID
func (_m *Repository) DeletePhoto(ctx context.Context, tx postgre.Transaction, productDetailID string) error {
	ret := _m.Called(ctx, tx, productDetailID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, string) error); ok {
		r0 = rf(ctx, tx, productDetailID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProductDetail provides a mock function with given fields: ctx, tx, productDetailID
func (_m *Repository) DeleteProductDetail(ctx context.Context, tx postgre.Transaction, productDetailID string) error {
	ret := _m.Called(ctx, tx, productDetailID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, string) error); ok {
		r0 = rf(ctx, tx, productDetailID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteReview provides a mock function with given fields: ctx, tx, reviewID
func (_m *Repository) DeleteReview(ctx context.Context, tx postgre.Transaction, reviewID string) error {
	ret := _m.Called(ctx, tx, reviewID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, string) error); ok {
		r0 = rf(ctx, tx, reviewID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteVariant provides a mock function with given fields: ctx, tx, productID
func (_m *Repository) DeleteVariant(ctx context.Context, tx postgre.Transaction, productID string) error {
	ret := _m.Called(ctx, tx, productID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, string) error); ok {
		r0 = rf(ctx, tx, productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindFavoriteProduct provides a mock function with given fields: ctx, userID, productID
func (_m *Repository) FindFavoriteProduct(ctx context.Context, userID string, productID string) (bool, error) {
	ret := _m.Called(ctx, userID, productID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, userID, productID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindReview provides a mock function with given fields: ctx, reviewID
func (_m *Repository) FindReview(ctx context.Context, reviewID string) (*body.ReviewProduct, error) {
	ret := _m.Called(ctx, reviewID)

	var r0 *body.ReviewProduct
	if rf, ok := ret.Get(0).(func(context.Context, string) *body.ReviewProduct); ok {
		r0 = rf(ctx, reviewID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*body.ReviewProduct)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, reviewID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllFavoriteTotalProduct provides a mock function with given fields: ctx, query, userID
func (_m *Repository) GetAllFavoriteTotalProduct(ctx context.Context, query *body.GetProductQueryRequest, userID string) (int64, error) {
	ret := _m.Called(ctx, query, userID)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *body.GetProductQueryRequest, string) int64); ok {
		r0 = rf(ctx, query, userID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *body.GetProductQueryRequest, string) error); ok {
		r1 = rf(ctx, query, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllImageByProductDetailID provides a mock function with given fields: ctx, productDetailID
func (_m *Repository) GetAllImageByProductDetailID(ctx context.Context, productDetailID string) ([]*string, error) {
	ret := _m.Called(ctx, productDetailID)

	var r0 []*string
	if rf, ok := ret.Get(0).(func(context.Context, string) []*string); ok {
		r0 = rf(ctx, productDetailID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, productDetailID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllTotalProduct provides a mock function with given fields: ctx, query
func (_m *Repository) GetAllTotalProduct(ctx context.Context, query *body.GetProductQueryRequest) (int64, error) {
	ret := _m.Called(ctx, query)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *body.GetProductQueryRequest) int64); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *body.GetProductQueryRequest) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBanners provides a mock function with given fields: ctx
func (_m *Repository) GetBanners(ctx context.Context) ([]*model.Banner, error) {
	ret := _m.Called(ctx)

	var r0 []*model.Banner
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Banner); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Banner)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategories provides a mock function with given fields: ctx
func (_m *Repository) GetCategories(ctx context.Context) ([]*model.Category, error) {
	ret := _m.Called(ctx)

	var r0 []*model.Category
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Category); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategoriesByName provides a mock function with given fields: ctx, name
func (_m *Repository) GetCategoriesByName(ctx context.Context, name string) ([]*model.Category, error) {
	ret := _m.Called(ctx, name)

	var r0 []*model.Category
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.Category); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategoriesByParentID provides a mock function with given fields: ctx, parentID
func (_m *Repository) GetCategoriesByParentID(ctx context.Context, parentID uuid.UUID) ([]*model.Category, error) {
	ret := _m.Called(ctx, parentID)

	var r0 []*model.Category
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*model.Category); ok {
		r0 = rf(ctx, parentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, parentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFavoriteProduct provides a mock function with given fields: ctx
func (_m *Repository) GetFavoriteProduct(ctx context.Context) ([]*model.ProductFavorite, error) {
	ret := _m.Called(ctx)

	var r0 []*model.ProductFavorite
	if rf, ok := ret.Get(0).(func(context.Context) []*model.ProductFavorite); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ProductFavorite)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFavoriteProducts provides a mock function with given fields: ctx, pgn, query, userID
func (_m *Repository) GetFavoriteProducts(ctx context.Context, pgn *pagination.Pagination, query *body.GetProductQueryRequest, userID string) ([]*body.Products, []*model.Promotion, []*model.Voucher, error) {
	ret := _m.Called(ctx, pgn, query, userID)

	var r0 []*body.Products
	if rf, ok := ret.Get(0).(func(context.Context, *pagination.Pagination, *body.GetProductQueryRequest, string) []*body.Products); ok {
		r0 = rf(ctx, pgn, query, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*body.Products)
		}
	}

	var r1 []*model.Promotion
	if rf, ok := ret.Get(1).(func(context.Context, *pagination.Pagination, *body.GetProductQueryRequest, string) []*model.Promotion); ok {
		r1 = rf(ctx, pgn, query, userID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*model.Promotion)
		}
	}

	var r2 []*model.Voucher
	if rf, ok := ret.Get(2).(func(context.Context, *pagination.Pagination, *body.GetProductQueryRequest, string) []*model.Voucher); ok {
		r2 = rf(ctx, pgn, query, userID)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]*model.Voucher)
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, *pagination.Pagination, *body.GetProductQueryRequest, string) error); ok {
		r3 = rf(ctx, pgn, query, userID)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetListedStatus provides a mock function with given fields: ctx, productID
func (_m *Repository) GetListedStatus(ctx context.Context, productID string) (bool, error) {
	ret := _m.Called(ctx, productID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, productID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMaxMinPriceByID provides a mock function with given fields: ctx, productID
func (_m *Repository) GetMaxMinPriceByID(ctx context.Context, productID string) (*body.RangePrice, error) {
	ret := _m.Called(ctx, productID)

	var r0 *body.RangePrice
	if rf, ok := ret.Get(0).(func(context.Context, string) *body.RangePrice); ok {
		r0 = rf(ctx, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*body.RangePrice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductDetail provides a mock function with given fields: ctx, productID, promo
func (_m *Repository) GetProductDetail(ctx context.Context, productID string, promo *body.PromotionInfo) ([]*body.ProductDetail, error) {
	ret := _m.Called(ctx, productID, promo)

	var r0 []*body.ProductDetail
	if rf, ok := ret.Get(0).(func(context.Context, string, *body.PromotionInfo) []*body.ProductDetail); ok {
		r0 = rf(ctx, productID, promo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*body.ProductDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *body.PromotionInfo) error); ok {
		r1 = rf(ctx, productID, promo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductInfo provides a mock function with given fields: ctx, productID
func (_m *Repository) GetProductInfo(ctx context.Context, productID string) (*body.ProductInfo, error) {
	ret := _m.Called(ctx, productID)

	var r0 *body.ProductInfo
	if rf, ok := ret.Get(0).(func(context.Context, string) *body.ProductInfo); ok {
		r0 = rf(ctx, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*body.ProductInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductReviews provides a mock function with given fields: ctx, pgn, productID, query
func (_m *Repository) GetProductReviews(ctx context.Context, pgn *pagination.Pagination, productID string, query *body.GetReviewQueryRequest) ([]*body.ReviewProduct, error) {
	ret := _m.Called(ctx, pgn, productID, query)

	var r0 []*body.ReviewProduct
	if rf, ok := ret.Get(0).(func(context.Context, *pagination.Pagination, string, *body.GetReviewQueryRequest) []*body.ReviewProduct); ok {
		r0 = rf(ctx, pgn, productID, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*body.ReviewProduct)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pagination.Pagination, string, *body.GetReviewQueryRequest) error); ok {
		r1 = rf(ctx, pgn, productID, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProducts provides a mock function with given fields: ctx, pgn, query
func (_m *Repository) GetProducts(ctx context.Context, pgn *pagination.Pagination, query *body.GetProductQueryRequest) ([]*body.Products, []*model.Promotion, []*model.Voucher, error) {
	ret := _m.Called(ctx, pgn, query)

	var r0 []*body.Products
	if rf, ok := ret.Get(0).(func(context.Context, *pagination.Pagination, *body.GetProductQueryRequest) []*body.Products); ok {
		r0 = rf(ctx, pgn, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*body.Products)
		}
	}

	var r1 []*model.Promotion
	if rf, ok := ret.Get(1).(func(context.Context, *pagination.Pagination, *body.GetProductQueryRequest) []*model.Promotion); ok {
		r1 = rf(ctx, pgn, query)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*model.Promotion)
		}
	}

	var r2 []*model.Voucher
	if rf, ok := ret.Get(2).(func(context.Context, *pagination.Pagination, *body.GetProductQueryRequest) []*model.Voucher); ok {
		r2 = rf(ctx, pgn, query)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]*model.Voucher)
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, *pagination.Pagination, *body.GetProductQueryRequest) error); ok {
		r3 = rf(ctx, pgn, query)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetPromotionInfo provides a mock function with given fields: ctx, productID
func (_m *Repository) GetPromotionInfo(ctx context.Context, productID string) (*body.PromotionInfo, error) {
	ret := _m.Called(ctx, productID)

	var r0 *body.PromotionInfo
	if rf, ok := ret.Get(0).(func(context.Context, string) *body.PromotionInfo); ok {
		r0 = rf(ctx, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*body.PromotionInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRatingProduct provides a mock function with given fields: ctx
func (_m *Repository) GetRatingProduct(ctx context.Context) ([]*model.ProductRating, error) {
	ret := _m.Called(ctx)

	var r0 []*model.ProductRating
	if rf, ok := ret.Get(0).(func(context.Context) []*model.ProductRating); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ProductRating)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecommendedProducts provides a mock function with given fields: ctx, pgn
func (_m *Repository) GetRecommendedProducts(ctx context.Context, pgn *pagination.Pagination) ([]*body.Products, []*model.Promotion, []*model.Voucher, error) {
	ret := _m.Called(ctx, pgn)

	var r0 []*body.Products
	if rf, ok := ret.Get(0).(func(context.Context, *pagination.Pagination) []*body.Products); ok {
		r0 = rf(ctx, pgn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*body.Products)
		}
	}

	var r1 []*model.Promotion
	if rf, ok := ret.Get(1).(func(context.Context, *pagination.Pagination) []*model.Promotion); ok {
		r1 = rf(ctx, pgn)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*model.Promotion)
		}
	}

	var r2 []*model.Voucher
	if rf, ok := ret.Get(2).(func(context.Context, *pagination.Pagination) []*model.Voucher); ok {
		r2 = rf(ctx, pgn)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]*model.Voucher)
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, *pagination.Pagination) error); ok {
		r3 = rf(ctx, pgn)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetShopIDByUserID provides a mock function with given fields: ctx, userID
func (_m *Repository) GetShopIDByUserID(ctx context.Context, userID string) (string, error) {
	ret := _m.Called(ctx, userID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalAllReviewProduct provides a mock function with given fields: ctx, productID, query
func (_m *Repository) GetTotalAllReviewProduct(ctx context.Context, productID string, query *body.GetReviewQueryRequest) (int64, error) {
	ret := _m.Called(ctx, productID, query)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, *body.GetReviewQueryRequest) int64); ok {
		r0 = rf(ctx, productID, query)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *body.GetReviewQueryRequest) error); ok {
		r1 = rf(ctx, productID, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalProduct provides a mock function with given fields: ctx
func (_m *Repository) GetTotalProduct(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalReviewRatingByProductID provides a mock function with given fields: ctx, productID
func (_m *Repository) GetTotalReviewRatingByProductID(ctx context.Context, productID string) ([]*body.RatingProduct, error) {
	ret := _m.Called(ctx, productID)

	var r0 []*body.RatingProduct
	if rf, ok := ret.Get(0).(func(context.Context, string) []*body.RatingProduct); ok {
		r0 = rf(ctx, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*body.RatingProduct)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateListedStatus provides a mock function with given fields: ctx, tx, listedStatus, productID
func (_m *Repository) UpdateListedStatus(ctx context.Context, tx postgre.Transaction, listedStatus bool, productID string) error {
	ret := _m.Called(ctx, tx, listedStatus, productID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, bool, string) error); ok {
		r0 = rf(ctx, tx, listedStatus, productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProduct provides a mock function with given fields: ctx, tx, requestBody, productID
func (_m *Repository) UpdateProduct(ctx context.Context, tx postgre.Transaction, requestBody body.UpdateProductInfoForQuery, productID string) error {
	ret := _m.Called(ctx, tx, requestBody, productID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, body.UpdateProductInfoForQuery, string) error); ok {
		r0 = rf(ctx, tx, requestBody, productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProductDetail provides a mock function with given fields: ctx, tx, requestBody, productID
func (_m *Repository) UpdateProductDetail(ctx context.Context, tx postgre.Transaction, requestBody body.UpdateProductDetailRequest, productID string) error {
	ret := _m.Called(ctx, tx, requestBody, productID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, body.UpdateProductDetailRequest, string) error); ok {
		r0 = rf(ctx, tx, requestBody, productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProductFavorite provides a mock function with given fields: ctx, productID, favCount
func (_m *Repository) UpdateProductFavorite(ctx context.Context, productID string, favCount int) error {
	ret := _m.Called(ctx, productID, favCount)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = rf(ctx, productID, favCount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProductRating provides a mock function with given fields: ctx, productID, ratingAvg
func (_m *Repository) UpdateProductRating(ctx context.Context, productID string, ratingAvg float64) error {
	ret := _m.Called(ctx, productID, ratingAvg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) error); ok {
		r0 = rf(ctx, productID, ratingAvg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateVariant provides a mock function with given fields: ctx, tx, variantID, variantDetailID
func (_m *Repository) UpdateVariant(ctx context.Context, tx postgre.Transaction, variantID string, variantDetailID string) error {
	ret := _m.Called(ctx, tx, variantID, variantDetailID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, string, string) error); ok {
		r0 = rf(ctx, tx, variantID, variantDetailID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
