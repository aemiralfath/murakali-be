// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	body "murakali/internal/module/seller/delivery/body"

	mock "github.com/stretchr/testify/mock"

	model "murakali/internal/model"

	pagination "murakali/pkg/pagination"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// CancelOrderStatus provides a mock function with given fields: ctx, userID, requestBody
func (_m *UseCase) CancelOrderStatus(ctx context.Context, userID string, requestBody body.CancelOrderStatus) error {
	ret := _m.Called(ctx, userID, requestBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, body.CancelOrderStatus) error); ok {
		r0 = rf(ctx, userID, requestBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeOrderStatus provides a mock function with given fields: ctx, userID, requestBody
func (_m *UseCase) ChangeOrderStatus(ctx context.Context, userID string, requestBody body.ChangeOrderStatusRequest) error {
	ret := _m.Called(ctx, userID, requestBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, body.ChangeOrderStatusRequest) error); ok {
		r0 = rf(ctx, userID, requestBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateCourierSeller provides a mock function with given fields: ctx, userID, courierID
func (_m *UseCase) CreateCourierSeller(ctx context.Context, userID string, courierID string) error {
	ret := _m.Called(ctx, userID, courierID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, courierID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePromotionSeller provides a mock function with given fields: ctx, userID, requestBody
func (_m *UseCase) CreatePromotionSeller(ctx context.Context, userID string, requestBody body.CreatePromotionRequest) (int, error) {
	ret := _m.Called(ctx, userID, requestBody)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string, body.CreatePromotionRequest) int); ok {
		r0 = rf(ctx, userID, requestBody)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, body.CreatePromotionRequest) error); ok {
		r1 = rf(ctx, userID, requestBody)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRefundThreadSeller provides a mock function with given fields: ctx, userID, requestBody
func (_m *UseCase) CreateRefundThreadSeller(ctx context.Context, userID string, requestBody *body.CreateRefundThreadRequest) error {
	ret := _m.Called(ctx, userID, requestBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *body.CreateRefundThreadRequest) error); ok {
		r0 = rf(ctx, userID, requestBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateVoucherSeller provides a mock function with given fields: ctx, userID, requestBody
func (_m *UseCase) CreateVoucherSeller(ctx context.Context, userID string, requestBody body.CreateVoucherRequest) error {
	ret := _m.Called(ctx, userID, requestBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, body.CreateVoucherRequest) error); ok {
		r0 = rf(ctx, userID, requestBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCourierSellerByID provides a mock function with given fields: ctx, shopCourierID
func (_m *UseCase) DeleteCourierSellerByID(ctx context.Context, shopCourierID string) error {
	ret := _m.Called(ctx, shopCourierID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, shopCourierID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteVoucherSeller provides a mock function with given fields: ctx, voucherIDShopID
func (_m *UseCase) DeleteVoucherSeller(ctx context.Context, voucherIDShopID *body.VoucherIDShopID) error {
	ret := _m.Called(ctx, voucherIDShopID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *body.VoucherIDShopID) error); ok {
		r0 = rf(ctx, voucherIDShopID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllPromotionSeller provides a mock function with given fields: ctx, userID, promoStatusID, pgn
func (_m *UseCase) GetAllPromotionSeller(ctx context.Context, userID string, promoStatusID string, pgn *pagination.Pagination) (*pagination.Pagination, error) {
	ret := _m.Called(ctx, userID, promoStatusID, pgn)

	var r0 *pagination.Pagination
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *pagination.Pagination) *pagination.Pagination); ok {
		r0 = rf(ctx, userID, promoStatusID, pgn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pagination.Pagination)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *pagination.Pagination) error); ok {
		r1 = rf(ctx, userID, promoStatusID, pgn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllSeller provides a mock function with given fields: ctx, shopName, pgn
func (_m *UseCase) GetAllSeller(ctx context.Context, shopName string, pgn *pagination.Pagination) (*pagination.Pagination, error) {
	ret := _m.Called(ctx, shopName, pgn)

	var r0 *pagination.Pagination
	if rf, ok := ret.Get(0).(func(context.Context, string, *pagination.Pagination) *pagination.Pagination); ok {
		r0 = rf(ctx, shopName, pgn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pagination.Pagination)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *pagination.Pagination) error); ok {
		r1 = rf(ctx, shopName, pgn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllVoucherSeller provides a mock function with given fields: ctx, userID, voucherStatusID, sortFilter, pgn
func (_m *UseCase) GetAllVoucherSeller(ctx context.Context, userID string, voucherStatusID string, sortFilter string, pgn *pagination.Pagination) (*pagination.Pagination, error) {
	ret := _m.Called(ctx, userID, voucherStatusID, sortFilter, pgn)

	var r0 *pagination.Pagination
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *pagination.Pagination) *pagination.Pagination); ok {
		r0 = rf(ctx, userID, voucherStatusID, sortFilter, pgn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pagination.Pagination)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *pagination.Pagination) error); ok {
		r1 = rf(ctx, userID, voucherStatusID, sortFilter, pgn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategoryBySellerID provides a mock function with given fields: ctx, shopID
func (_m *UseCase) GetCategoryBySellerID(ctx context.Context, shopID string) ([]*body.CategoryResponse, error) {
	ret := _m.Called(ctx, shopID)

	var r0 []*body.CategoryResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) []*body.CategoryResponse); ok {
		r0 = rf(ctx, shopID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*body.CategoryResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shopID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCourierSeller provides a mock function with given fields: ctx, userID
func (_m *UseCase) GetCourierSeller(ctx context.Context, userID string) (*body.CourierSellerResponse, error) {
	ret := _m.Called(ctx, userID)

	var r0 *body.CourierSellerResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) *body.CourierSellerResponse); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*body.CourierSellerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDetailPromotionSellerByID provides a mock function with given fields: ctx, shopProductPromo
func (_m *UseCase) GetDetailPromotionSellerByID(ctx context.Context, shopProductPromo *body.ShopProductPromo) (*body.PromotionDetailSeller, error) {
	ret := _m.Called(ctx, shopProductPromo)

	var r0 *body.PromotionDetailSeller
	if rf, ok := ret.Get(0).(func(context.Context, *body.ShopProductPromo) *body.PromotionDetailSeller); ok {
		r0 = rf(ctx, shopProductPromo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*body.PromotionDetailSeller)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *body.ShopProductPromo) error); ok {
		r1 = rf(ctx, shopProductPromo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDetailVoucherSeller provides a mock function with given fields: ctx, voucherIDShopID
func (_m *UseCase) GetDetailVoucherSeller(ctx context.Context, voucherIDShopID *body.VoucherIDShopID) (*model.Voucher, error) {
	ret := _m.Called(ctx, voucherIDShopID)

	var r0 *model.Voucher
	if rf, ok := ret.Get(0).(func(context.Context, *body.VoucherIDShopID) *model.Voucher); ok {
		r0 = rf(ctx, voucherIDShopID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Voucher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *body.VoucherIDShopID) error); ok {
		r1 = rf(ctx, voucherIDShopID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrder provides a mock function with given fields: ctx, userID, orderStatusID, voucherShopID, sortQuery, pgn
func (_m *UseCase) GetOrder(ctx context.Context, userID string, orderStatusID string, voucherShopID string, sortQuery string, pgn *pagination.Pagination) (*pagination.Pagination, error) {
	ret := _m.Called(ctx, userID, orderStatusID, voucherShopID, sortQuery, pgn)

	var r0 *pagination.Pagination
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, *pagination.Pagination) *pagination.Pagination); ok {
		r0 = rf(ctx, userID, orderStatusID, voucherShopID, sortQuery, pgn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pagination.Pagination)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, *pagination.Pagination) error); ok {
		r1 = rf(ctx, userID, orderStatusID, voucherShopID, sortQuery, pgn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderByOrderID provides a mock function with given fields: ctx, orderID
func (_m *UseCase) GetOrderByOrderID(ctx context.Context, orderID string) (*model.Order, error) {
	ret := _m.Called(ctx, orderID)

	var r0 *model.Order
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Order); ok {
		r0 = rf(ctx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPerformance provides a mock function with given fields: ctx, userID, update
func (_m *UseCase) GetPerformance(ctx context.Context, userID string, update bool) (*body.SellerPerformance, error) {
	ret := _m.Called(ctx, userID, update)

	var r0 *body.SellerPerformance
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) *body.SellerPerformance); ok {
		r0 = rf(ctx, userID, update)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*body.SellerPerformance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, userID, update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductWithoutPromotionSeller provides a mock function with given fields: ctx, userID, productName, pgn
func (_m *UseCase) GetProductWithoutPromotionSeller(ctx context.Context, userID string, productName string, pgn *pagination.Pagination) (*pagination.Pagination, error) {
	ret := _m.Called(ctx, userID, productName, pgn)

	var r0 *pagination.Pagination
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *pagination.Pagination) *pagination.Pagination); ok {
		r0 = rf(ctx, userID, productName, pgn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pagination.Pagination)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *pagination.Pagination) error); ok {
		r1 = rf(ctx, userID, productName, pgn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRefundOrderSeller provides a mock function with given fields: ctx, userID, refundID
func (_m *UseCase) GetRefundOrderSeller(ctx context.Context, userID string, refundID string) (*body.GetRefundThreadResponse, error) {
	ret := _m.Called(ctx, userID, refundID)

	var r0 *body.GetRefundThreadResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *body.GetRefundThreadResponse); ok {
		r0 = rf(ctx, userID, refundID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*body.GetRefundThreadResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, refundID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSellerBySellerID provides a mock function with given fields: ctx, sellerID
func (_m *UseCase) GetSellerBySellerID(ctx context.Context, sellerID string) (*body.SellerResponse, error) {
	ret := _m.Called(ctx, sellerID)

	var r0 *body.SellerResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) *body.SellerResponse); ok {
		r0 = rf(ctx, sellerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*body.SellerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, sellerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSellerByUserID provides a mock function with given fields: ctx, userID
func (_m *UseCase) GetSellerByUserID(ctx context.Context, userID string) (*body.SellerResponse, error) {
	ret := _m.Called(ctx, userID)

	var r0 *body.SellerResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) *body.SellerResponse); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*body.SellerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateExpiredAtOrder provides a mock function with given fields: ctx
func (_m *UseCase) UpdateExpiredAtOrder(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOnDeliveryOrder provides a mock function with given fields: ctx
func (_m *UseCase) UpdateOnDeliveryOrder(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePromotionSeller provides a mock function with given fields: ctx, userID, requestBody
func (_m *UseCase) UpdatePromotionSeller(ctx context.Context, userID string, requestBody body.UpdatePromotionRequest) error {
	ret := _m.Called(ctx, userID, requestBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, body.UpdatePromotionRequest) error); ok {
		r0 = rf(ctx, userID, requestBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRefundAccept provides a mock function with given fields: ctx, userID, requestBody
func (_m *UseCase) UpdateRefundAccept(ctx context.Context, userID string, requestBody *body.UpdateRefundRequest) error {
	ret := _m.Called(ctx, userID, requestBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *body.UpdateRefundRequest) error); ok {
		r0 = rf(ctx, userID, requestBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRefundReject provides a mock function with given fields: ctx, userID, requestBody
func (_m *UseCase) UpdateRefundReject(ctx context.Context, userID string, requestBody *body.UpdateRefundRequest) error {
	ret := _m.Called(ctx, userID, requestBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *body.UpdateRefundRequest) error); ok {
		r0 = rf(ctx, userID, requestBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateResiNumberInOrderSeller provides a mock function with given fields: ctx, userID, orderID, requestBody
func (_m *UseCase) UpdateResiNumberInOrderSeller(ctx context.Context, userID string, orderID string, requestBody body.UpdateNoResiOrderSellerRequest) error {
	ret := _m.Called(ctx, userID, orderID, requestBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, body.UpdateNoResiOrderSellerRequest) error); ok {
		r0 = rf(ctx, userID, orderID, requestBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSellerInformationByUserID provides a mock function with given fields: ctx, shopName, userID
func (_m *UseCase) UpdateSellerInformationByUserID(ctx context.Context, shopName string, userID string) error {
	ret := _m.Called(ctx, shopName, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, shopName, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateVoucherSeller provides a mock function with given fields: ctx, userID, requestBody
func (_m *UseCase) UpdateVoucherSeller(ctx context.Context, userID string, requestBody body.UpdateVoucherRequest) error {
	ret := _m.Called(ctx, userID, requestBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, body.UpdateVoucherRequest) error); ok {
		r0 = rf(ctx, userID, requestBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithdrawalOrderBalance provides a mock function with given fields: ctx, orderID
func (_m *UseCase) WithdrawalOrderBalance(ctx context.Context, orderID string) error {
	ret := _m.Called(ctx, orderID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, orderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCase(t mockConstructorTestingTNewUseCase) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
