// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	body "murakali/internal/module/seller/delivery/body"

	mock "github.com/stretchr/testify/mock"

	model "murakali/internal/model"

	pagination "murakali/pkg/pagination"

	postgre "murakali/pkg/postgre"

	time "time"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CancelOrderStatus provides a mock function with given fields: ctx, tx, requestBody
func (_m *Repository) CancelOrderStatus(ctx context.Context, tx postgre.Transaction, requestBody body.CancelOrderStatus) error {
	ret := _m.Called(ctx, tx, requestBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, body.CancelOrderStatus) error); ok {
		r0 = rf(ctx, tx, requestBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeOrderStatus provides a mock function with given fields: ctx, requestBody
func (_m *Repository) ChangeOrderStatus(ctx context.Context, requestBody body.ChangeOrderStatusRequest) error {
	ret := _m.Called(ctx, requestBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, body.ChangeOrderStatusRequest) error); ok {
		r0 = rf(ctx, requestBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CountCodeVoucher provides a mock function with given fields: ctx, code
func (_m *Repository) CountCodeVoucher(ctx context.Context, code string) (int64, error) {
	ret := _m.Called(ctx, code)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, code)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCourierSeller provides a mock function with given fields: ctx, shopID, courierID
func (_m *Repository) CreateCourierSeller(ctx context.Context, shopID string, courierID string) error {
	ret := _m.Called(ctx, shopID, courierID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, shopID, courierID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePromotionSeller provides a mock function with given fields: ctx, tx, promotionShop
func (_m *Repository) CreatePromotionSeller(ctx context.Context, tx postgre.Transaction, promotionShop *model.Promotion) error {
	ret := _m.Called(ctx, tx, promotionShop)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, *model.Promotion) error); ok {
		r0 = rf(ctx, tx, promotionShop)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateRefundSeller provides a mock function with given fields: ctx, tx, requestBody
func (_m *Repository) CreateRefundSeller(ctx context.Context, tx postgre.Transaction, requestBody body.CancelOrderStatus) error {
	ret := _m.Called(ctx, tx, requestBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, body.CancelOrderStatus) error); ok {
		r0 = rf(ctx, tx, requestBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateRefundThreadSeller provides a mock function with given fields: ctx, refundThreadData
func (_m *Repository) CreateRefundThreadSeller(ctx context.Context, refundThreadData *model.RefundThread) error {
	ret := _m.Called(ctx, refundThreadData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.RefundThread) error); ok {
		r0 = rf(ctx, refundThreadData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateVoucherSeller provides a mock function with given fields: ctx, voucherShop
func (_m *Repository) CreateVoucherSeller(ctx context.Context, voucherShop *model.Voucher) error {
	ret := _m.Called(ctx, voucherShop)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Voucher) error); ok {
		r0 = rf(ctx, voucherShop)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCourierSellerByID provides a mock function with given fields: ctx, shopCourierID
func (_m *Repository) DeleteCourierSellerByID(ctx context.Context, shopCourierID string) error {
	ret := _m.Called(ctx, shopCourierID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, shopCourierID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteVoucherSeller provides a mock function with given fields: ctx, voucherIDShopID
func (_m *Repository) DeleteVoucherSeller(ctx context.Context, voucherIDShopID *body.VoucherIDShopID) error {
	ret := _m.Called(ctx, voucherIDShopID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *body.VoucherIDShopID) error); ok {
		r0 = rf(ctx, voucherIDShopID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAddressByBuyerID provides a mock function with given fields: ctx, userID
func (_m *Repository) GetAddressByBuyerID(ctx context.Context, userID string) (*model.Address, error) {
	ret := _m.Called(ctx, userID)

	var r0 *model.Address
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Address); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAddressBySellerID provides a mock function with given fields: ctx, userID
func (_m *Repository) GetAddressBySellerID(ctx context.Context, userID string) (*model.Address, error) {
	ret := _m.Called(ctx, userID)

	var r0 *model.Address
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Address); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCourier provides a mock function with given fields: ctx
func (_m *Repository) GetAllCourier(ctx context.Context) ([]*body.CourierInfo, error) {
	ret := _m.Called(ctx)

	var r0 []*body.CourierInfo
	if rf, ok := ret.Get(0).(func(context.Context) []*body.CourierInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*body.CourierInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPromotionSeller provides a mock function with given fields: ctx, shopID, promoStatusID
func (_m *Repository) GetAllPromotionSeller(ctx context.Context, shopID string, promoStatusID string) ([]*body.PromotionSellerResponse, error) {
	ret := _m.Called(ctx, shopID, promoStatusID)

	var r0 []*body.PromotionSellerResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*body.PromotionSellerResponse); ok {
		r0 = rf(ctx, shopID, promoStatusID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*body.PromotionSellerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, shopID, promoStatusID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllSeller provides a mock function with given fields: ctx, pgn, shopName
func (_m *Repository) GetAllSeller(ctx context.Context, pgn *pagination.Pagination, shopName string) ([]*body.SellerResponse, error) {
	ret := _m.Called(ctx, pgn, shopName)

	var r0 []*body.SellerResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pagination.Pagination, string) []*body.SellerResponse); ok {
		r0 = rf(ctx, pgn, shopName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*body.SellerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pagination.Pagination, string) error); ok {
		r1 = rf(ctx, pgn, shopName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllVoucherSeller provides a mock function with given fields: ctx, shopID, voucherStatusID, sortFilter, pgn
func (_m *Repository) GetAllVoucherSeller(ctx context.Context, shopID string, voucherStatusID string, sortFilter string, pgn *pagination.Pagination) ([]*model.Voucher, error) {
	ret := _m.Called(ctx, shopID, voucherStatusID, sortFilter, pgn)

	var r0 []*model.Voucher
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *pagination.Pagination) []*model.Voucher); ok {
		r0 = rf(ctx, shopID, voucherStatusID, sortFilter, pgn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Voucher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *pagination.Pagination) error); ok {
		r1 = rf(ctx, shopID, voucherStatusID, sortFilter, pgn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllVoucherSellerByIDAndShopID provides a mock function with given fields: ctx, voucherIDShopID
func (_m *Repository) GetAllVoucherSellerByIDAndShopID(ctx context.Context, voucherIDShopID *body.VoucherIDShopID) (*model.Voucher, error) {
	ret := _m.Called(ctx, voucherIDShopID)

	var r0 *model.Voucher
	if rf, ok := ret.Get(0).(func(context.Context, *body.VoucherIDShopID) *model.Voucher); ok {
		r0 = rf(ctx, voucherIDShopID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Voucher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *body.VoucherIDShopID) error); ok {
		r1 = rf(ctx, voucherIDShopID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuyerIDByOrderID provides a mock function with given fields: ctx, orderID
func (_m *Repository) GetBuyerIDByOrderID(ctx context.Context, orderID string) (string, error) {
	ret := _m.Called(ctx, orderID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, orderID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategoryBySellerID provides a mock function with given fields: ctx, shopID
func (_m *Repository) GetCategoryBySellerID(ctx context.Context, shopID string) ([]*body.CategoryResponse, error) {
	ret := _m.Called(ctx, shopID)

	var r0 []*body.CategoryResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) []*body.CategoryResponse); ok {
		r0 = rf(ctx, shopID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*body.CategoryResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shopID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCostRedis provides a mock function with given fields: ctx, key
func (_m *Repository) GetCostRedis(ctx context.Context, key string) (*string, error) {
	ret := _m.Called(ctx, key)

	var r0 *string
	if rf, ok := ret.Get(0).(func(context.Context, string) *string); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCourierByID provides a mock function with given fields: ctx, courierID
func (_m *Repository) GetCourierByID(ctx context.Context, courierID string) (string, error) {
	ret := _m.Called(ctx, courierID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, courierID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, courierID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCourierSeller provides a mock function with given fields: ctx, userID
func (_m *Repository) GetCourierSeller(ctx context.Context, userID string) ([]*body.CourierSellerRelationInfo, error) {
	ret := _m.Called(ctx, userID)

	var r0 []*body.CourierSellerRelationInfo
	if rf, ok := ret.Get(0).(func(context.Context, string) []*body.CourierSellerRelationInfo); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*body.CourierSellerRelationInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCourierSellerByID provides a mock function with given fields: ctx, shopCourierID
func (_m *Repository) GetCourierSellerByID(ctx context.Context, shopCourierID string) (string, error) {
	ret := _m.Called(ctx, shopCourierID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, shopCourierID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shopCourierID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCourierSellerNotNullByShopAndCourierID provides a mock function with given fields: ctx, shopID, courierID
func (_m *Repository) GetCourierSellerNotNullByShopAndCourierID(ctx context.Context, shopID string, courierID string) (string, error) {
	ret := _m.Called(ctx, shopID, courierID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, shopID, courierID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, shopID, courierID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDetailPromotionSellerByID provides a mock function with given fields: ctx, shopProductPromo
func (_m *Repository) GetDetailPromotionSellerByID(ctx context.Context, shopProductPromo *body.ShopProductPromo) (*body.PromotionDetailSeller, error) {
	ret := _m.Called(ctx, shopProductPromo)

	var r0 *body.PromotionDetailSeller
	if rf, ok := ret.Get(0).(func(context.Context, *body.ShopProductPromo) *body.PromotionDetailSeller); ok {
		r0 = rf(ctx, shopProductPromo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*body.PromotionDetailSeller)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *body.ShopProductPromo) error); ok {
		r1 = rf(ctx, shopProductPromo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderByOrderID provides a mock function with given fields: ctx, OrderID
func (_m *Repository) GetOrderByOrderID(ctx context.Context, OrderID string) (*model.Order, error) {
	ret := _m.Called(ctx, OrderID)

	var r0 *model.Order
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Order); ok {
		r0 = rf(ctx, OrderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, OrderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderByTransactionID provides a mock function with given fields: ctx, tx, transactionID
func (_m *Repository) GetOrderByTransactionID(ctx context.Context, tx postgre.Transaction, transactionID string) ([]*model.OrderModel, error) {
	ret := _m.Called(ctx, tx, transactionID)

	var r0 []*model.OrderModel
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, string) []*model.OrderModel); ok {
		r0 = rf(ctx, tx, transactionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.OrderModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, postgre.Transaction, string) error); ok {
		r1 = rf(ctx, tx, transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderItemsByOrderID provides a mock function with given fields: ctx, tx, orderID
func (_m *Repository) GetOrderItemsByOrderID(ctx context.Context, tx postgre.Transaction, orderID string) ([]*model.OrderItem, error) {
	ret := _m.Called(ctx, tx, orderID)

	var r0 []*model.OrderItem
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, string) []*model.OrderItem); ok {
		r0 = rf(ctx, tx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.OrderItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, postgre.Transaction, string) error); ok {
		r1 = rf(ctx, tx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderModelByID provides a mock function with given fields: ctx, OrderID
func (_m *Repository) GetOrderModelByID(ctx context.Context, OrderID string) (*model.OrderModel, error) {
	ret := _m.Called(ctx, OrderID)

	var r0 *model.OrderModel
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.OrderModel); ok {
		r0 = rf(ctx, OrderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OrderModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, OrderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrders provides a mock function with given fields: ctx, userID, orderStatusID, voucherShopID, sortQuery, pgn
func (_m *Repository) GetOrders(ctx context.Context, userID string, orderStatusID string, voucherShopID string, sortQuery string, pgn *pagination.Pagination) ([]*model.Order, error) {
	ret := _m.Called(ctx, userID, orderStatusID, voucherShopID, sortQuery, pgn)

	var r0 []*model.Order
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, *pagination.Pagination) []*model.Order); ok {
		r0 = rf(ctx, userID, orderStatusID, voucherShopID, sortQuery, pgn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, *pagination.Pagination) error); ok {
		r1 = rf(ctx, userID, orderStatusID, voucherShopID, sortQuery, pgn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrdersOnDelivery provides a mock function with given fields: ctx
func (_m *Repository) GetOrdersOnDelivery(ctx context.Context) ([]*model.OrderModel, error) {
	ret := _m.Called(ctx)

	var r0 []*model.OrderModel
	if rf, ok := ret.Get(0).(func(context.Context) []*model.OrderModel); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.OrderModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPerformaceRedis provides a mock function with given fields: ctx, key
func (_m *Repository) GetPerformaceRedis(ctx context.Context, key string) (*body.SellerPerformance, error) {
	ret := _m.Called(ctx, key)

	var r0 *body.SellerPerformance
	if rf, ok := ret.Get(0).(func(context.Context, string) *body.SellerPerformance); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*body.SellerPerformance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPerformance provides a mock function with given fields: ctx, shopID
func (_m *Repository) GetPerformance(ctx context.Context, shopID string) (*body.SellerPerformance, error) {
	ret := _m.Called(ctx, shopID)

	var r0 *body.SellerPerformance
	if rf, ok := ret.Get(0).(func(context.Context, string) *body.SellerPerformance); ok {
		r0 = rf(ctx, shopID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*body.SellerPerformance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shopID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductDetailByID provides a mock function with given fields: ctx, tx, productDetailID
func (_m *Repository) GetProductDetailByID(ctx context.Context, tx postgre.Transaction, productDetailID string) (*model.ProductDetail, error) {
	ret := _m.Called(ctx, tx, productDetailID)

	var r0 *model.ProductDetail
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, string) *model.ProductDetail); ok {
		r0 = rf(ctx, tx, productDetailID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, postgre.Transaction, string) error); ok {
		r1 = rf(ctx, tx, productDetailID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductPromotion provides a mock function with given fields: ctx, shopProduct
func (_m *Repository) GetProductPromotion(ctx context.Context, shopProduct *body.ShopProduct) (*body.ProductPromotion, error) {
	ret := _m.Called(ctx, shopProduct)

	var r0 *body.ProductPromotion
	if rf, ok := ret.Get(0).(func(context.Context, *body.ShopProduct) *body.ProductPromotion); ok {
		r0 = rf(ctx, shopProduct)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*body.ProductPromotion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *body.ShopProduct) error); ok {
		r1 = rf(ctx, shopProduct)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductWithoutPromotionSeller provides a mock function with given fields: ctx, shopID, productName, pgn
func (_m *Repository) GetProductWithoutPromotionSeller(ctx context.Context, shopID string, productName string, pgn *pagination.Pagination) ([]*body.GetProductWithoutPromotion, error) {
	ret := _m.Called(ctx, shopID, productName, pgn)

	var r0 []*body.GetProductWithoutPromotion
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *pagination.Pagination) []*body.GetProductWithoutPromotion); ok {
		r0 = rf(ctx, shopID, productName, pgn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*body.GetProductWithoutPromotion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *pagination.Pagination) error); ok {
		r1 = rf(ctx, shopID, productName, pgn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPromotionSellerDetailByID provides a mock function with given fields: ctx, shopProductPromo
func (_m *Repository) GetPromotionSellerDetailByID(ctx context.Context, shopProductPromo *body.ShopProductPromo) (*body.PromotionSellerResponse, error) {
	ret := _m.Called(ctx, shopProductPromo)

	var r0 *body.PromotionSellerResponse
	if rf, ok := ret.Get(0).(func(context.Context, *body.ShopProductPromo) *body.PromotionSellerResponse); ok {
		r0 = rf(ctx, shopProductPromo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*body.PromotionSellerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *body.ShopProductPromo) error); ok {
		r1 = rf(ctx, shopProductPromo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRefundOrderByID provides a mock function with given fields: ctx, refundID
func (_m *Repository) GetRefundOrderByID(ctx context.Context, refundID string) (*model.Refund, error) {
	ret := _m.Called(ctx, refundID)

	var r0 *model.Refund
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Refund); ok {
		r0 = rf(ctx, refundID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Refund)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refundID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRefundOrderByOrderID provides a mock function with given fields: ctx, orderID
func (_m *Repository) GetRefundOrderByOrderID(ctx context.Context, orderID string) (*model.Refund, error) {
	ret := _m.Called(ctx, orderID)

	var r0 *model.Refund
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Refund); ok {
		r0 = rf(ctx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Refund)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRefundThreadByRefundID provides a mock function with given fields: ctx, refundID
func (_m *Repository) GetRefundThreadByRefundID(ctx context.Context, refundID string) ([]*body.RThread, error) {
	ret := _m.Called(ctx, refundID)

	var r0 []*body.RThread
	if rf, ok := ret.Get(0).(func(context.Context, string) []*body.RThread); ok {
		r0 = rf(ctx, refundID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*body.RThread)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refundID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSellerBySellerID provides a mock function with given fields: ctx, sellerID
func (_m *Repository) GetSellerBySellerID(ctx context.Context, sellerID string) (*body.SellerResponse, error) {
	ret := _m.Called(ctx, sellerID)

	var r0 *body.SellerResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) *body.SellerResponse); ok {
		r0 = rf(ctx, sellerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*body.SellerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, sellerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSellerByUserID provides a mock function with given fields: ctx, userID
func (_m *Repository) GetSellerByUserID(ctx context.Context, userID string) (*body.SellerResponse, error) {
	ret := _m.Called(ctx, userID)

	var r0 *body.SellerResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) *body.SellerResponse); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*body.SellerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSellerIDByOrderID provides a mock function with given fields: ctx, orderID
func (_m *Repository) GetSellerIDByOrderID(ctx context.Context, orderID string) (string, error) {
	ret := _m.Called(ctx, orderID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, orderID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShopByID provides a mock function with given fields: ctx, shopID
func (_m *Repository) GetShopByID(ctx context.Context, shopID string) (*model.Shop, error) {
	ret := _m.Called(ctx, shopID)

	var r0 *model.Shop
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Shop); ok {
		r0 = rf(ctx, shopID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Shop)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shopID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShopIDByOrder provides a mock function with given fields: ctx, OrderID
func (_m *Repository) GetShopIDByOrder(ctx context.Context, OrderID string) (string, error) {
	ret := _m.Called(ctx, OrderID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, OrderID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, OrderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShopIDByUser provides a mock function with given fields: ctx, userID
func (_m *Repository) GetShopIDByUser(ctx context.Context, userID string) (string, error) {
	ret := _m.Called(ctx, userID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShopIDByUserID provides a mock function with given fields: ctx, userID
func (_m *Repository) GetShopIDByUserID(ctx context.Context, userID string) (string, error) {
	ret := _m.Called(ctx, userID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalAllSeller provides a mock function with given fields: ctx, shopName
func (_m *Repository) GetTotalAllSeller(ctx context.Context, shopName string) (int64, error) {
	ret := _m.Called(ctx, shopName)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, shopName)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shopName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalOrder provides a mock function with given fields: ctx, userID, orderStatusID, voucherShopID
func (_m *Repository) GetTotalOrder(ctx context.Context, userID string, orderStatusID string, voucherShopID string) (int64, error) {
	ret := _m.Called(ctx, userID, orderStatusID, voucherShopID)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) int64); ok {
		r0 = rf(ctx, userID, orderStatusID, voucherShopID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, userID, orderStatusID, voucherShopID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalProductWithoutPromotionSeller provides a mock function with given fields: ctx, shopID, productName
func (_m *Repository) GetTotalProductWithoutPromotionSeller(ctx context.Context, shopID string, productName string) (int64, error) {
	ret := _m.Called(ctx, shopID, productName)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int64); ok {
		r0 = rf(ctx, shopID, productName)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, shopID, productName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalPromotionSeller provides a mock function with given fields: ctx, shopID, promoStatusID
func (_m *Repository) GetTotalPromotionSeller(ctx context.Context, shopID string, promoStatusID string) (int64, error) {
	ret := _m.Called(ctx, shopID, promoStatusID)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int64); ok {
		r0 = rf(ctx, shopID, promoStatusID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, shopID, promoStatusID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalVoucherSeller provides a mock function with given fields: ctx, shopID, voucherStatusID
func (_m *Repository) GetTotalVoucherSeller(ctx context.Context, shopID string, voucherStatusID string) (int64, error) {
	ret := _m.Called(ctx, shopID, voucherStatusID)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int64); ok {
		r0 = rf(ctx, shopID, voucherStatusID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, shopID, voucherStatusID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionsExpired provides a mock function with given fields: ctx
func (_m *Repository) GetTransactionsExpired(ctx context.Context) ([]*model.Transaction, error) {
	ret := _m.Called(ctx)

	var r0 []*model.Transaction
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Transaction); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *Repository) GetUserByID(ctx context.Context, id string) (*model.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWalletByUserID provides a mock function with given fields: ctx, tx, userID
func (_m *Repository) GetWalletByUserID(ctx context.Context, tx postgre.Transaction, userID string) (*model.Wallet, error) {
	ret := _m.Called(ctx, tx, userID)

	var r0 *model.Wallet
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, string) *model.Wallet); ok {
		r0 = rf(ctx, tx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, postgre.Transaction, string) error); ok {
		r1 = rf(ctx, tx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertCostRedis provides a mock function with given fields: ctx, key, value
func (_m *Repository) InsertCostRedis(ctx context.Context, key string, value string) error {
	ret := _m.Called(ctx, key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertPerformaceRedis provides a mock function with given fields: ctx, key, value
func (_m *Repository) InsertPerformaceRedis(ctx context.Context, key string, value *body.SellerPerformance) error {
	ret := _m.Called(ctx, key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *body.SellerPerformance) error); ok {
		r0 = rf(ctx, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertWalletHistory provides a mock function with given fields: ctx, tx, walletHistory
func (_m *Repository) InsertWalletHistory(ctx context.Context, tx postgre.Transaction, walletHistory *model.WalletHistory) error {
	ret := _m.Called(ctx, tx, walletHistory)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, *model.WalletHistory) error); ok {
		r0 = rf(ctx, tx, walletHistory)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCourierSellerByID provides a mock function with given fields: ctx, shopID, courierID
func (_m *Repository) UpdateCourierSellerByID(ctx context.Context, shopID string, courierID string) error {
	ret := _m.Called(ctx, shopID, courierID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, shopID, courierID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrder provides a mock function with given fields: ctx, tx, orderData
func (_m *Repository) UpdateOrder(ctx context.Context, tx postgre.Transaction, orderData *model.OrderModel) error {
	ret := _m.Called(ctx, tx, orderData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, *model.OrderModel) error); ok {
		r0 = rf(ctx, tx, orderData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrderRefundRejected provides a mock function with given fields: ctx, tx, orderData
func (_m *Repository) UpdateOrderRefundRejected(ctx context.Context, tx postgre.Transaction, orderData *model.OrderModel) error {
	ret := _m.Called(ctx, tx, orderData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, *model.OrderModel) error); ok {
		r0 = rf(ctx, tx, orderData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProductDetailStock provides a mock function with given fields: ctx, tx, productDetailData
func (_m *Repository) UpdateProductDetailStock(ctx context.Context, tx postgre.Transaction, productDetailData *model.ProductDetail) error {
	ret := _m.Called(ctx, tx, productDetailData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, *model.ProductDetail) error); ok {
		r0 = rf(ctx, tx, productDetailData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePromotionSeller provides a mock function with given fields: ctx, promotion
func (_m *Repository) UpdatePromotionSeller(ctx context.Context, promotion *model.Promotion) error {
	ret := _m.Called(ctx, promotion)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Promotion) error); ok {
		r0 = rf(ctx, promotion)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRefundAccept provides a mock function with given fields: ctx, refundDataID
func (_m *Repository) UpdateRefundAccept(ctx context.Context, refundDataID string) error {
	ret := _m.Called(ctx, refundDataID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, refundDataID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRefundReject provides a mock function with given fields: ctx, tx, refundDataID
func (_m *Repository) UpdateRefundReject(ctx context.Context, tx postgre.Transaction, refundDataID string) error {
	ret := _m.Called(ctx, tx, refundDataID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, string) error); ok {
		r0 = rf(ctx, tx, refundDataID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateResiNumberInOrderSeller provides a mock function with given fields: ctx, noResi, orderID, shopID, arriveAt
func (_m *Repository) UpdateResiNumberInOrderSeller(ctx context.Context, noResi string, orderID string, shopID string, arriveAt time.Time) error {
	ret := _m.Called(ctx, noResi, orderID, shopID, arriveAt)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, time.Time) error); ok {
		r0 = rf(ctx, noResi, orderID, shopID, arriveAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSellerInformationByUserID provides a mock function with given fields: ctx, shopName, userID
func (_m *Repository) UpdateSellerInformationByUserID(ctx context.Context, shopName string, userID string) error {
	ret := _m.Called(ctx, shopName, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, shopName, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTransaction provides a mock function with given fields: ctx, tx, transactionData
func (_m *Repository) UpdateTransaction(ctx context.Context, tx postgre.Transaction, transactionData *model.Transaction) error {
	ret := _m.Called(ctx, tx, transactionData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, *model.Transaction) error); ok {
		r0 = rf(ctx, tx, transactionData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateVoucherSeller provides a mock function with given fields: ctx, voucherShop
func (_m *Repository) UpdateVoucherSeller(ctx context.Context, voucherShop *model.Voucher) error {
	ret := _m.Called(ctx, voucherShop)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Voucher) error); ok {
		r0 = rf(ctx, voucherShop)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWalletBalance provides a mock function with given fields: ctx, tx, wallet
func (_m *Repository) UpdateWalletBalance(ctx context.Context, tx postgre.Transaction, wallet *model.Wallet) error {
	ret := _m.Called(ctx, tx, wallet)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, *model.Wallet) error); ok {
		r0 = rf(ctx, tx, wallet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
