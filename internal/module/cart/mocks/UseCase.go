// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	body "murakali/internal/module/cart/delivery/body"

	context "context"

	mock "github.com/stretchr/testify/mock"

	pagination "murakali/pkg/pagination"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// AddCartItems provides a mock function with given fields: ctx, userID, requestBody
func (_m *UseCase) AddCartItems(ctx context.Context, userID string, requestBody body.AddCartItemRequest) error {
	ret := _m.Called(ctx, userID, requestBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, body.AddCartItemRequest) error); ok {
		r0 = rf(ctx, userID, requestBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCartItems provides a mock function with given fields: ctx, userID, productDetailID
func (_m *UseCase) DeleteCartItems(ctx context.Context, userID string, productDetailID string) error {
	ret := _m.Called(ctx, userID, productDetailID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, productDetailID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCartHoverHome provides a mock function with given fields: ctx, userID, limit
func (_m *UseCase) GetCartHoverHome(ctx context.Context, userID string, limit int) (*body.CartHomeResponse, error) {
	ret := _m.Called(ctx, userID, limit)

	var r0 *body.CartHomeResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *body.CartHomeResponse); ok {
		r0 = rf(ctx, userID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*body.CartHomeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, userID, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCartItems provides a mock function with given fields: ctx, userID, pgn
func (_m *UseCase) GetCartItems(ctx context.Context, userID string, pgn *pagination.Pagination) (*pagination.Pagination, error) {
	ret := _m.Called(ctx, userID, pgn)

	var r0 *pagination.Pagination
	if rf, ok := ret.Get(0).(func(context.Context, string, *pagination.Pagination) *pagination.Pagination); ok {
		r0 = rf(ctx, userID, pgn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pagination.Pagination)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *pagination.Pagination) error); ok {
		r1 = rf(ctx, userID, pgn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoucherMarketplace provides a mock function with given fields: ctx, pgn
func (_m *UseCase) GetVoucherMarketplace(ctx context.Context, pgn *pagination.Pagination) (*pagination.Pagination, error) {
	ret := _m.Called(ctx, pgn)

	var r0 *pagination.Pagination
	if rf, ok := ret.Get(0).(func(context.Context, *pagination.Pagination) *pagination.Pagination); ok {
		r0 = rf(ctx, pgn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pagination.Pagination)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pagination.Pagination) error); ok {
		r1 = rf(ctx, pgn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoucherShop provides a mock function with given fields: ctx, shopID, pgn
func (_m *UseCase) GetVoucherShop(ctx context.Context, shopID string, pgn *pagination.Pagination) (*pagination.Pagination, error) {
	ret := _m.Called(ctx, shopID, pgn)

	var r0 *pagination.Pagination
	if rf, ok := ret.Get(0).(func(context.Context, string, *pagination.Pagination) *pagination.Pagination); ok {
		r0 = rf(ctx, shopID, pgn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pagination.Pagination)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *pagination.Pagination) error); ok {
		r1 = rf(ctx, shopID, pgn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCartItems provides a mock function with given fields: ctx, userID, requestBody
func (_m *UseCase) UpdateCartItems(ctx context.Context, userID string, requestBody body.CartItemRequest) error {
	ret := _m.Called(ctx, userID, requestBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, body.CartItemRequest) error); ok {
		r0 = rf(ctx, userID, requestBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCase(t mockConstructorTestingTNewUseCase) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
