// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	body "murakali/internal/module/cart/delivery/body"

	context "context"

	mock "github.com/stretchr/testify/mock"

	model "murakali/internal/model"

	pagination "murakali/pkg/pagination"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateCart provides a mock function with given fields: ctx, userID, productDetailID, quantity
func (_m *Repository) CreateCart(ctx context.Context, userID string, productDetailID string, quantity float64) (*model.CartItem, error) {
	ret := _m.Called(ctx, userID, productDetailID, quantity)

	var r0 *model.CartItem
	if rf, ok := ret.Get(0).(func(context.Context, string, string, float64) *model.CartItem); ok {
		r0 = rf(ctx, userID, productDetailID, quantity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CartItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, float64) error); ok {
		r1 = rf(ctx, userID, productDetailID, quantity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCartByID provides a mock function with given fields: ctx, cartItem
func (_m *Repository) DeleteCartByID(ctx context.Context, cartItem *model.CartItem) error {
	ret := _m.Called(ctx, cartItem)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CartItem) error); ok {
		r0 = rf(ctx, cartItem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCartHoverHome provides a mock function with given fields: ctx, userID, limit
func (_m *Repository) GetCartHoverHome(ctx context.Context, userID string, limit int) ([]*body.CartHome, error) {
	ret := _m.Called(ctx, userID, limit)

	var r0 []*body.CartHome
	if rf, ok := ret.Get(0).(func(context.Context, string, int) []*body.CartHome); ok {
		r0 = rf(ctx, userID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*body.CartHome)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, userID, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCartItems provides a mock function with given fields: ctx, userID, pgn
func (_m *Repository) GetCartItems(ctx context.Context, userID string, pgn *pagination.Pagination) ([]*body.CartItemsResponse, []*body.ProductDetailResponse, []*body.PromoResponse, error) {
	ret := _m.Called(ctx, userID, pgn)

	var r0 []*body.CartItemsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *pagination.Pagination) []*body.CartItemsResponse); ok {
		r0 = rf(ctx, userID, pgn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*body.CartItemsResponse)
		}
	}

	var r1 []*body.ProductDetailResponse
	if rf, ok := ret.Get(1).(func(context.Context, string, *pagination.Pagination) []*body.ProductDetailResponse); ok {
		r1 = rf(ctx, userID, pgn)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*body.ProductDetailResponse)
		}
	}

	var r2 []*body.PromoResponse
	if rf, ok := ret.Get(2).(func(context.Context, string, *pagination.Pagination) []*body.PromoResponse); ok {
		r2 = rf(ctx, userID, pgn)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]*body.PromoResponse)
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, string, *pagination.Pagination) error); ok {
		r3 = rf(ctx, userID, pgn)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetCartProductDetail provides a mock function with given fields: ctx, userID, productDetailID
func (_m *Repository) GetCartProductDetail(ctx context.Context, userID string, productDetailID string) (*model.CartItem, error) {
	ret := _m.Called(ctx, userID, productDetailID)

	var r0 *model.CartItem
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.CartItem); ok {
		r0 = rf(ctx, userID, productDetailID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CartItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, productDetailID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductDetailByID provides a mock function with given fields: ctx, productDetailID
func (_m *Repository) GetProductDetailByID(ctx context.Context, productDetailID string) (*model.ProductDetail, error) {
	ret := _m.Called(ctx, productDetailID)

	var r0 *model.ProductDetail
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.ProductDetail); ok {
		r0 = rf(ctx, productDetailID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, productDetailID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalCart provides a mock function with given fields: ctx, userID
func (_m *Repository) GetTotalCart(ctx context.Context, userID string) (int64, error) {
	ret := _m.Called(ctx, userID)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalVoucherMarketplace provides a mock function with given fields: ctx
func (_m *Repository) GetTotalVoucherMarketplace(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalVoucherShop provides a mock function with given fields: ctx, shopID
func (_m *Repository) GetTotalVoucherShop(ctx context.Context, shopID string) (int64, error) {
	ret := _m.Called(ctx, shopID)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, shopID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shopID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *Repository) GetUserByID(ctx context.Context, id string) (*model.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoucherMarketplace provides a mock function with given fields: ctx, pgn
func (_m *Repository) GetVoucherMarketplace(ctx context.Context, pgn *pagination.Pagination) ([]*model.Voucher, error) {
	ret := _m.Called(ctx, pgn)

	var r0 []*model.Voucher
	if rf, ok := ret.Get(0).(func(context.Context, *pagination.Pagination) []*model.Voucher); ok {
		r0 = rf(ctx, pgn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Voucher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pagination.Pagination) error); ok {
		r1 = rf(ctx, pgn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoucherShop provides a mock function with given fields: ctx, shopID, pgn
func (_m *Repository) GetVoucherShop(ctx context.Context, shopID string, pgn *pagination.Pagination) ([]*model.Voucher, error) {
	ret := _m.Called(ctx, shopID, pgn)

	var r0 []*model.Voucher
	if rf, ok := ret.Get(0).(func(context.Context, string, *pagination.Pagination) []*model.Voucher); ok {
		r0 = rf(ctx, shopID, pgn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Voucher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *pagination.Pagination) error); ok {
		r1 = rf(ctx, shopID, pgn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCartByID provides a mock function with given fields: ctx, cartItem
func (_m *Repository) UpdateCartByID(ctx context.Context, cartItem *model.CartItem) error {
	ret := _m.Called(ctx, cartItem)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CartItem) error); ok {
		r0 = rf(ctx, cartItem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
