// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	body "murakali/internal/module/user/delivery/body"

	mock "github.com/stretchr/testify/mock"

	model "murakali/internal/model"

	pagination "murakali/pkg/pagination"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// ActivateWallet provides a mock function with given fields: ctx, userID, pin
func (_m *UseCase) ActivateWallet(ctx context.Context, userID string, pin string) error {
	ret := _m.Called(ctx, userID, pin)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, pin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddSealabsPay provides a mock function with given fields: ctx, request, userid
func (_m *UseCase) AddSealabsPay(ctx context.Context, request body.AddSealabsPayRequest, userid string) error {
	ret := _m.Called(ctx, request, userid)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, body.AddSealabsPayRequest, string) error); ok {
		r0 = rf(ctx, request, userid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeOrderStatus provides a mock function with given fields: ctx, userID, requestBody
func (_m *UseCase) ChangeOrderStatus(ctx context.Context, userID string, requestBody body.ChangeOrderStatusRequest) error {
	ret := _m.Called(ctx, userID, requestBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, body.ChangeOrderStatusRequest) error); ok {
		r0 = rf(ctx, userID, requestBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangePassword provides a mock function with given fields: ctx, userID, newPassword
func (_m *UseCase) ChangePassword(ctx context.Context, userID string, newPassword string) error {
	ret := _m.Called(ctx, userID, newPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeWalletPin provides a mock function with given fields: ctx, userID, pin
func (_m *UseCase) ChangeWalletPin(ctx context.Context, userID string, pin string) error {
	ret := _m.Called(ctx, userID, pin)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, pin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeWalletPinStepUp provides a mock function with given fields: ctx, userID, requestBody
func (_m *UseCase) ChangeWalletPinStepUp(ctx context.Context, userID string, requestBody body.ChangeWalletPinStepUpRequest) (string, error) {
	ret := _m.Called(ctx, userID, requestBody)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, body.ChangeWalletPinStepUpRequest) string); ok {
		r0 = rf(ctx, userID, requestBody)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, body.ChangeWalletPinStepUpRequest) error); ok {
		r1 = rf(ctx, userID, requestBody)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeWalletPinStepUpEmail provides a mock function with given fields: ctx, userID
func (_m *UseCase) ChangeWalletPinStepUpEmail(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeWalletPinStepUpVerify provides a mock function with given fields: ctx, requestBody, userID
func (_m *UseCase) ChangeWalletPinStepUpVerify(ctx context.Context, requestBody body.VerifyOTPRequest, userID string) (string, error) {
	ret := _m.Called(ctx, requestBody, userID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, body.VerifyOTPRequest, string) string); ok {
		r0 = rf(ctx, requestBody, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, body.VerifyOTPRequest, string) error); ok {
		r1 = rf(ctx, requestBody, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CompletedRejectedRefund provides a mock function with given fields: ctx
func (_m *UseCase) CompletedRejectedRefund(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAddress provides a mock function with given fields: ctx, userID, requestBody
func (_m *UseCase) CreateAddress(ctx context.Context, userID string, requestBody body.CreateAddressRequest) error {
	ret := _m.Called(ctx, userID, requestBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, body.CreateAddressRequest) error); ok {
		r0 = rf(ctx, userID, requestBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateRefundThreadUser provides a mock function with given fields: ctx, userID, requestBody
func (_m *UseCase) CreateRefundThreadUser(ctx context.Context, userID string, requestBody *body.CreateRefundThreadRequest) error {
	ret := _m.Called(ctx, userID, requestBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *body.CreateRefundThreadRequest) error); ok {
		r0 = rf(ctx, userID, requestBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateRefundUser provides a mock function with given fields: ctx, userID, requestBody
func (_m *UseCase) CreateRefundUser(ctx context.Context, userID string, requestBody body.CreateRefundUserRequest) error {
	ret := _m.Called(ctx, userID, requestBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, body.CreateRefundUserRequest) error); ok {
		r0 = rf(ctx, userID, requestBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSLPPayment provides a mock function with given fields: ctx, transactionID
func (_m *UseCase) CreateSLPPayment(ctx context.Context, transactionID string) (string, error) {
	ret := _m.Called(ctx, transactionID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, transactionID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTransaction provides a mock function with given fields: ctx, userID, requestBody
func (_m *UseCase) CreateTransaction(ctx context.Context, userID string, requestBody body.CreateTransactionRequest) (string, error) {
	ret := _m.Called(ctx, userID, requestBody)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, body.CreateTransactionRequest) string); ok {
		r0 = rf(ctx, userID, requestBody)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, body.CreateTransactionRequest) error); ok {
		r1 = rf(ctx, userID, requestBody)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWalletPayment provides a mock function with given fields: ctx, transactionID
func (_m *UseCase) CreateWalletPayment(ctx context.Context, transactionID string) error {
	ret := _m.Called(ctx, transactionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, transactionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAddressByID provides a mock function with given fields: ctx, userID, addressID
func (_m *UseCase) DeleteAddressByID(ctx context.Context, userID string, addressID string) error {
	ret := _m.Called(ctx, userID, addressID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, addressID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSealabsPay provides a mock function with given fields: ctx, userID, cardNumber
func (_m *UseCase) DeleteSealabsPay(ctx context.Context, userID string, cardNumber string) error {
	ret := _m.Called(ctx, userID, cardNumber)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, cardNumber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditEmail provides a mock function with given fields: ctx, userID, requestBody
func (_m *UseCase) EditEmail(ctx context.Context, userID string, requestBody body.EditEmailRequest) (*model.User, error) {
	ret := _m.Called(ctx, userID, requestBody)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, string, body.EditEmailRequest) *model.User); ok {
		r0 = rf(ctx, userID, requestBody)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, body.EditEmailRequest) error); ok {
		r1 = rf(ctx, userID, requestBody)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditEmailUser provides a mock function with given fields: ctx, userID, requestBody
func (_m *UseCase) EditEmailUser(ctx context.Context, userID string, requestBody body.EditEmailUserRequest) (*model.User, error) {
	ret := _m.Called(ctx, userID, requestBody)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, string, body.EditEmailUserRequest) *model.User); ok {
		r0 = rf(ctx, userID, requestBody)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, body.EditEmailUserRequest) error); ok {
		r1 = rf(ctx, userID, requestBody)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditUser provides a mock function with given fields: ctx, userID, requestBody
func (_m *UseCase) EditUser(ctx context.Context, userID string, requestBody body.EditUserRequest) (*model.User, error) {
	ret := _m.Called(ctx, userID, requestBody)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, string, body.EditUserRequest) *model.User); ok {
		r0 = rf(ctx, userID, requestBody)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, body.EditUserRequest) error); ok {
		r1 = rf(ctx, userID, requestBody)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAddress provides a mock function with given fields: ctx, userID, _a2, queryRequest
func (_m *UseCase) GetAddress(ctx context.Context, userID string, _a2 *pagination.Pagination, queryRequest *body.GetAddressQueryRequest) (*pagination.Pagination, error) {
	ret := _m.Called(ctx, userID, _a2, queryRequest)

	var r0 *pagination.Pagination
	if rf, ok := ret.Get(0).(func(context.Context, string, *pagination.Pagination, *body.GetAddressQueryRequest) *pagination.Pagination); ok {
		r0 = rf(ctx, userID, _a2, queryRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pagination.Pagination)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *pagination.Pagination, *body.GetAddressQueryRequest) error); ok {
		r1 = rf(ctx, userID, _a2, queryRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAddressByID provides a mock function with given fields: ctx, userID, addressID
func (_m *UseCase) GetAddressByID(ctx context.Context, userID string, addressID string) (*model.Address, error) {
	ret := _m.Called(ctx, userID, addressID)

	var r0 *model.Address
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.Address); ok {
		r0 = rf(ctx, userID, addressID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, addressID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDetailWalletHistory provides a mock function with given fields: ctx, walletHistoryID, userID
func (_m *UseCase) GetDetailWalletHistory(ctx context.Context, walletHistoryID string, userID string) (*body.DetailHistoryWalletResponse, error) {
	ret := _m.Called(ctx, walletHistoryID, userID)

	var r0 *body.DetailHistoryWalletResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *body.DetailHistoryWalletResponse); ok {
		r0 = rf(ctx, walletHistoryID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*body.DetailHistoryWalletResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, walletHistoryID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrder provides a mock function with given fields: ctx, userID, orderStatusID, pgn
func (_m *UseCase) GetOrder(ctx context.Context, userID string, orderStatusID string, pgn *pagination.Pagination) (*pagination.Pagination, error) {
	ret := _m.Called(ctx, userID, orderStatusID, pgn)

	var r0 *pagination.Pagination
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *pagination.Pagination) *pagination.Pagination); ok {
		r0 = rf(ctx, userID, orderStatusID, pgn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pagination.Pagination)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *pagination.Pagination) error); ok {
		r1 = rf(ctx, userID, orderStatusID, pgn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderByOrderID provides a mock function with given fields: ctx, orderID
func (_m *UseCase) GetOrderByOrderID(ctx context.Context, orderID string) (*model.Order, error) {
	ret := _m.Called(ctx, orderID)

	var r0 *model.Order
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Order); ok {
		r0 = rf(ctx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRefundOrder provides a mock function with given fields: ctx, userID, refundID
func (_m *UseCase) GetRefundOrder(ctx context.Context, userID string, refundID string) (*body.GetRefundThreadResponse, error) {
	ret := _m.Called(ctx, userID, refundID)

	var r0 *body.GetRefundThreadResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *body.GetRefundThreadResponse); ok {
		r0 = rf(ctx, userID, refundID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*body.GetRefundThreadResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, refundID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSealabsPay provides a mock function with given fields: ctx, userid
func (_m *UseCase) GetSealabsPay(ctx context.Context, userid string) ([]*model.SealabsPay, error) {
	ret := _m.Called(ctx, userid)

	var r0 []*model.SealabsPay
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.SealabsPay); ok {
		r0 = rf(ctx, userid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.SealabsPay)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionByID provides a mock function with given fields: ctx, transactionID
func (_m *UseCase) GetTransactionByID(ctx context.Context, transactionID string) (*body.GetTransactionByIDResponse, error) {
	ret := _m.Called(ctx, transactionID)

	var r0 *body.GetTransactionByIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) *body.GetTransactionByIDResponse); ok {
		r0 = rf(ctx, transactionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*body.GetTransactionByIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionByUserID provides a mock function with given fields: ctx, userID, status, pgn
func (_m *UseCase) GetTransactionByUserID(ctx context.Context, userID string, status int, pgn *pagination.Pagination) (*pagination.Pagination, error) {
	ret := _m.Called(ctx, userID, status, pgn)

	var r0 *pagination.Pagination
	if rf, ok := ret.Get(0).(func(context.Context, string, int, *pagination.Pagination) *pagination.Pagination); ok {
		r0 = rf(ctx, userID, status, pgn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pagination.Pagination)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int, *pagination.Pagination) error); ok {
		r1 = rf(ctx, userID, status, pgn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionDetailByID provides a mock function with given fields: ctx, transactionID, userID
func (_m *UseCase) GetTransactionDetailByID(ctx context.Context, transactionID string, userID string) (*body.TransactionDetailResponse, error) {
	ret := _m.Called(ctx, transactionID, userID)

	var r0 *body.TransactionDetailResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *body.TransactionDetailResponse); ok {
		r0 = rf(ctx, transactionID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*body.TransactionDetailResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, transactionID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserProfile provides a mock function with given fields: ctx, userID
func (_m *UseCase) GetUserProfile(ctx context.Context, userID string) (*body.ProfileResponse, error) {
	ret := _m.Called(ctx, userID)

	var r0 *body.ProfileResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) *body.ProfileResponse); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*body.ProfileResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWallet provides a mock function with given fields: ctx, userID
func (_m *UseCase) GetWallet(ctx context.Context, userID string) (*model.Wallet, error) {
	ret := _m.Called(ctx, userID)

	var r0 *model.Wallet
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Wallet); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWalletHistory provides a mock function with given fields: ctx, userID, pgn
func (_m *UseCase) GetWalletHistory(ctx context.Context, userID string, pgn *pagination.Pagination) (*pagination.Pagination, error) {
	ret := _m.Called(ctx, userID, pgn)

	var r0 *pagination.Pagination
	if rf, ok := ret.Get(0).(func(context.Context, string, *pagination.Pagination) *pagination.Pagination); ok {
		r0 = rf(ctx, userID, pgn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pagination.Pagination)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *pagination.Pagination) error); ok {
		r1 = rf(ctx, userID, pgn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PatchSealabsPay provides a mock function with given fields: ctx, cardNumber, userid
func (_m *UseCase) PatchSealabsPay(ctx context.Context, cardNumber string, userid string) error {
	ret := _m.Called(ctx, cardNumber, userid)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, cardNumber, userid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterMerchant provides a mock function with given fields: ctx, userID, shopName
func (_m *UseCase) RegisterMerchant(ctx context.Context, userID string, shopName string) error {
	ret := _m.Called(ctx, userID, shopName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, shopName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendOTPEmail provides a mock function with given fields: ctx, email
func (_m *UseCase) SendOTPEmail(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TopUpWallet provides a mock function with given fields: ctx, userID, requestBody
func (_m *UseCase) TopUpWallet(ctx context.Context, userID string, requestBody body.TopUpWalletRequest) (string, error) {
	ret := _m.Called(ctx, userID, requestBody)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, body.TopUpWalletRequest) string); ok {
		r0 = rf(ctx, userID, requestBody)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, body.TopUpWalletRequest) error); ok {
		r1 = rf(ctx, userID, requestBody)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAddressByID provides a mock function with given fields: ctx, userID, addressID, requestBody
func (_m *UseCase) UpdateAddressByID(ctx context.Context, userID string, addressID string, requestBody body.UpdateAddressRequest) error {
	ret := _m.Called(ctx, userID, addressID, requestBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, body.UpdateAddressRequest) error); ok {
		r0 = rf(ctx, userID, addressID, requestBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTransaction provides a mock function with given fields: ctx, transactionID, requestBody
func (_m *UseCase) UpdateTransaction(ctx context.Context, transactionID string, requestBody body.SLPCallbackRequest) error {
	ret := _m.Called(ctx, transactionID, requestBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, body.SLPCallbackRequest) error); ok {
		r0 = rf(ctx, transactionID, requestBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTransactionPaymentMethod provides a mock function with given fields: ctx, transactionID, cardNumber
func (_m *UseCase) UpdateTransactionPaymentMethod(ctx context.Context, transactionID string, cardNumber string) error {
	ret := _m.Called(ctx, transactionID, cardNumber)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, transactionID, cardNumber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWalletTransaction provides a mock function with given fields: ctx, transactionID, requestBody
func (_m *UseCase) UpdateWalletTransaction(ctx context.Context, transactionID string, requestBody body.SLPCallbackRequest) error {
	ret := _m.Called(ctx, transactionID, requestBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, body.SLPCallbackRequest) error); ok {
		r0 = rf(ctx, transactionID, requestBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadProfilePicture provides a mock function with given fields: ctx, imgURL, userID
func (_m *UseCase) UploadProfilePicture(ctx context.Context, imgURL string, userID string) error {
	ret := _m.Called(ctx, imgURL, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, imgURL, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyOTP provides a mock function with given fields: ctx, requestBody, userID
func (_m *UseCase) VerifyOTP(ctx context.Context, requestBody body.VerifyOTPRequest, userID string) (string, error) {
	ret := _m.Called(ctx, requestBody, userID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, body.VerifyOTPRequest, string) string); ok {
		r0 = rf(ctx, requestBody, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, body.VerifyOTPRequest, string) error); ok {
		r1 = rf(ctx, requestBody, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyPasswordChange provides a mock function with given fields: ctx, userID
func (_m *UseCase) VerifyPasswordChange(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WalletStepUp provides a mock function with given fields: ctx, userID, requestBody
func (_m *UseCase) WalletStepUp(ctx context.Context, userID string, requestBody body.WalletStepUpRequest) (string, error) {
	ret := _m.Called(ctx, userID, requestBody)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, body.WalletStepUpRequest) string); ok {
		r0 = rf(ctx, userID, requestBody)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, body.WalletStepUpRequest) error); ok {
		r1 = rf(ctx, userID, requestBody)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCase(t mockConstructorTestingTNewUseCase) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
