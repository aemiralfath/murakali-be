// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	body "murakali/internal/module/user/delivery/body"

	mock "github.com/stretchr/testify/mock"

	model "murakali/internal/model"

	pagination "murakali/pkg/pagination"

	postgre "murakali/pkg/postgre"

	uuid "github.com/google/uuid"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddSealabsPay provides a mock function with given fields: ctx, request, userid
func (_m *Repository) AddSealabsPay(ctx context.Context, request body.AddSealabsPayRequest, userid string) error {
	ret := _m.Called(ctx, request, userid)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, body.AddSealabsPayRequest, string) error); ok {
		r0 = rf(ctx, request, userid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddSealabsPayTrans provides a mock function with given fields: ctx, tx, request, userid
func (_m *Repository) AddSealabsPayTrans(ctx context.Context, tx postgre.Transaction, request body.AddSealabsPayRequest, userid string) error {
	ret := _m.Called(ctx, tx, request, userid)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, body.AddSealabsPayRequest, string) error); ok {
		r0 = rf(ctx, tx, request, userid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddShop provides a mock function with given fields: ctx, userID, shopName
func (_m *Repository) AddShop(ctx context.Context, userID string, shopName string) error {
	ret := _m.Called(ctx, userID, shopName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, shopName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeOrderStatus provides a mock function with given fields: ctx, requestBody
func (_m *Repository) ChangeOrderStatus(ctx context.Context, requestBody body.ChangeOrderStatusRequest) error {
	ret := _m.Called(ctx, requestBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, body.ChangeOrderStatusRequest) error); ok {
		r0 = rf(ctx, requestBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckDefaultSealabsPay provides a mock function with given fields: ctx, userid
func (_m *Repository) CheckDefaultSealabsPay(ctx context.Context, userid string) (*string, error) {
	ret := _m.Called(ctx, userid)

	var r0 *string
	if rf, ok := ret.Get(0).(func(context.Context, string) *string); ok {
		r0 = rf(ctx, userid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckDeletedSealabsPay provides a mock function with given fields: ctx, cardNumber, userid
func (_m *Repository) CheckDeletedSealabsPay(ctx context.Context, cardNumber string, userid string) (int, error) {
	ret := _m.Called(ctx, cardNumber, userid)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int); ok {
		r0 = rf(ctx, cardNumber, userid)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, cardNumber, userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckEmailHistory provides a mock function with given fields: ctx, email
func (_m *Repository) CheckEmailHistory(ctx context.Context, email string) (*model.EmailHistory, error) {
	ret := _m.Called(ctx, email)

	var r0 *model.EmailHistory
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.EmailHistory); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.EmailHistory)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckShopByID provides a mock function with given fields: ctx, userID
func (_m *Repository) CheckShopByID(ctx context.Context, userID string) (int64, error) {
	ret := _m.Called(ctx, userID)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckShopUnique provides a mock function with given fields: ctx, shopName
func (_m *Repository) CheckShopUnique(ctx context.Context, shopName string) (int64, error) {
	ret := _m.Called(ctx, shopName)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, shopName)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shopName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckUserSealabsPay provides a mock function with given fields: ctx, userid
func (_m *Repository) CheckUserSealabsPay(ctx context.Context, userid string) (int, error) {
	ret := _m.Called(ctx, userid)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, userid)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAddress provides a mock function with given fields: ctx, tx, userID, requestBody
func (_m *Repository) CreateAddress(ctx context.Context, tx postgre.Transaction, userID string, requestBody body.CreateAddressRequest) error {
	ret := _m.Called(ctx, tx, userID, requestBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, string, body.CreateAddressRequest) error); ok {
		r0 = rf(ctx, tx, userID, requestBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateEmailHistory provides a mock function with given fields: ctx, tx, email
func (_m *Repository) CreateEmailHistory(ctx context.Context, tx postgre.Transaction, email string) error {
	ret := _m.Called(ctx, tx, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, string) error); ok {
		r0 = rf(ctx, tx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrder provides a mock function with given fields: ctx, tx, orderData
func (_m *Repository) CreateOrder(ctx context.Context, tx postgre.Transaction, orderData *model.OrderModel) (*uuid.UUID, error) {
	ret := _m.Called(ctx, tx, orderData)

	var r0 *uuid.UUID
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, *model.OrderModel) *uuid.UUID); ok {
		r0 = rf(ctx, tx, orderData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, postgre.Transaction, *model.OrderModel) error); ok {
		r1 = rf(ctx, tx, orderData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrderItem provides a mock function with given fields: ctx, tx, item
func (_m *Repository) CreateOrderItem(ctx context.Context, tx postgre.Transaction, item *model.OrderItem) (*uuid.UUID, error) {
	ret := _m.Called(ctx, tx, item)

	var r0 *uuid.UUID
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, *model.OrderItem) *uuid.UUID); ok {
		r0 = rf(ctx, tx, item)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, postgre.Transaction, *model.OrderItem) error); ok {
		r1 = rf(ctx, tx, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRefundThreadUser provides a mock function with given fields: ctx, refundThreadData
func (_m *Repository) CreateRefundThreadUser(ctx context.Context, refundThreadData *model.RefundThread) error {
	ret := _m.Called(ctx, refundThreadData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.RefundThread) error); ok {
		r0 = rf(ctx, refundThreadData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateRefundUser provides a mock function with given fields: ctx, tx, refundData
func (_m *Repository) CreateRefundUser(ctx context.Context, tx postgre.Transaction, refundData *model.Refund) error {
	ret := _m.Called(ctx, tx, refundData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, *model.Refund) error); ok {
		r0 = rf(ctx, tx, refundData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTransaction provides a mock function with given fields: ctx, tx, transactionData
func (_m *Repository) CreateTransaction(ctx context.Context, tx postgre.Transaction, transactionData *model.Transaction) (*uuid.UUID, error) {
	ret := _m.Called(ctx, tx, transactionData)

	var r0 *uuid.UUID
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, *model.Transaction) *uuid.UUID); ok {
		r0 = rf(ctx, tx, transactionData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, postgre.Transaction, *model.Transaction) error); ok {
		r1 = rf(ctx, tx, transactionData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWallet provides a mock function with given fields: ctx, walletData
func (_m *Repository) CreateWallet(ctx context.Context, walletData *model.Wallet) error {
	ret := _m.Called(ctx, walletData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Wallet) error); ok {
		r0 = rf(ctx, walletData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAddress provides a mock function with given fields: ctx, addressID
func (_m *Repository) DeleteAddress(ctx context.Context, addressID string) error {
	ret := _m.Called(ctx, addressID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, addressID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCartItemByID provides a mock function with given fields: ctx, tx, cartItemData
func (_m *Repository) DeleteCartItemByID(ctx context.Context, tx postgre.Transaction, cartItemData *model.CartItem) error {
	ret := _m.Called(ctx, tx, cartItemData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, *model.CartItem) error); ok {
		r0 = rf(ctx, tx, cartItemData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOTPValue provides a mock function with given fields: ctx, email
func (_m *Repository) DeleteOTPValue(ctx context.Context, email string) (int64, error) {
	ret := _m.Called(ctx, email)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOTPValueChangeWalletPin provides a mock function with given fields: ctx, email
func (_m *Repository) DeleteOTPValueChangeWalletPin(ctx context.Context, email string) (int64, error) {
	ret := _m.Called(ctx, email)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSealabsPay provides a mock function with given fields: ctx, cardNmber
func (_m *Repository) DeleteSealabsPay(ctx context.Context, cardNmber string) error {
	ret := _m.Called(ctx, cardNmber)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, cardNmber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAddressByBuyerID provides a mock function with given fields: ctx, userID
func (_m *Repository) GetAddressByBuyerID(ctx context.Context, userID string) (*model.Address, error) {
	ret := _m.Called(ctx, userID)

	var r0 *model.Address
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Address); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAddressByID provides a mock function with given fields: ctx, userID, addressID
func (_m *Repository) GetAddressByID(ctx context.Context, userID string, addressID string) (*model.Address, error) {
	ret := _m.Called(ctx, userID, addressID)

	var r0 *model.Address
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.Address); ok {
		r0 = rf(ctx, userID, addressID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, addressID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAddressBySellerID provides a mock function with given fields: ctx, userID
func (_m *Repository) GetAddressBySellerID(ctx context.Context, userID string) (*model.Address, error) {
	ret := _m.Called(ctx, userID)

	var r0 *model.Address
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Address); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAddresses provides a mock function with given fields: ctx, userID, name, isDefault, isShopDefault, _a5
func (_m *Repository) GetAddresses(ctx context.Context, userID string, name string, isDefault bool, isShopDefault bool, _a5 *pagination.Pagination) ([]*model.Address, error) {
	ret := _m.Called(ctx, userID, name, isDefault, isShopDefault, _a5)

	var r0 []*model.Address
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool, bool, *pagination.Pagination) []*model.Address); ok {
		r0 = rf(ctx, userID, name, isDefault, isShopDefault, _a5)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, bool, bool, *pagination.Pagination) error); ok {
		r1 = rf(ctx, userID, name, isDefault, isShopDefault, _a5)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAddresses provides a mock function with given fields: ctx, userID, name, _a3
func (_m *Repository) GetAllAddresses(ctx context.Context, userID string, name string, _a3 *pagination.Pagination) ([]*model.Address, error) {
	ret := _m.Called(ctx, userID, name, _a3)

	var r0 []*model.Address
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *pagination.Pagination) []*model.Address); ok {
		r0 = rf(ctx, userID, name, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *pagination.Pagination) error); ok {
		r1 = rf(ctx, userID, name, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuyerIDByOrderID provides a mock function with given fields: ctx, orderID
func (_m *Repository) GetBuyerIDByOrderID(ctx context.Context, orderID string) (string, error) {
	ret := _m.Called(ctx, orderID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, orderID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCartItemUser provides a mock function with given fields: ctx, userID, productDetailID
func (_m *Repository) GetCartItemUser(ctx context.Context, userID string, productDetailID string) (*model.CartItem, error) {
	ret := _m.Called(ctx, userID, productDetailID)

	var r0 *model.CartItem
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.CartItem); ok {
		r0 = rf(ctx, userID, productDetailID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CartItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, productDetailID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCostRedis provides a mock function with given fields: ctx, key
func (_m *Repository) GetCostRedis(ctx context.Context, key string) (*string, error) {
	ret := _m.Called(ctx, key)

	var r0 *string
	if rf, ok := ret.Get(0).(func(context.Context, string) *string); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCourierShopByID provides a mock function with given fields: ctx, CourierID, shopID
func (_m *Repository) GetCourierShopByID(ctx context.Context, CourierID string, shopID string) (*model.Courier, error) {
	ret := _m.Called(ctx, CourierID, shopID)

	var r0 *model.Courier
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.Courier); ok {
		r0 = rf(ctx, CourierID, shopID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Courier)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, CourierID, shopID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDefaultShopAddress provides a mock function with given fields: ctx, userID
func (_m *Repository) GetDefaultShopAddress(ctx context.Context, userID string) (*model.Address, error) {
	ret := _m.Called(ctx, userID)

	var r0 *model.Address
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Address); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDefaultUserAddress provides a mock function with given fields: ctx, userID
func (_m *Repository) GetDefaultUserAddress(ctx context.Context, userID string) (*model.Address, error) {
	ret := _m.Called(ctx, userID)

	var r0 *model.Address
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Address); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOTPValue provides a mock function with given fields: ctx, email
func (_m *Repository) GetOTPValue(ctx context.Context, email string) (string, error) {
	ret := _m.Called(ctx, email)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOTPValueChangeWalletPin provides a mock function with given fields: ctx, email
func (_m *Repository) GetOTPValueChangeWalletPin(ctx context.Context, email string) (string, error) {
	ret := _m.Called(ctx, email)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderByOrderID provides a mock function with given fields: ctx, OrderID
func (_m *Repository) GetOrderByOrderID(ctx context.Context, OrderID string) (*model.Order, error) {
	ret := _m.Called(ctx, OrderID)

	var r0 *model.Order
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Order); ok {
		r0 = rf(ctx, OrderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, OrderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderByTransactionID provides a mock function with given fields: ctx, transactionID
func (_m *Repository) GetOrderByTransactionID(ctx context.Context, transactionID string) ([]*model.OrderModel, error) {
	ret := _m.Called(ctx, transactionID)

	var r0 []*model.OrderModel
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.OrderModel); ok {
		r0 = rf(ctx, transactionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.OrderModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderDetailByTransactionID provides a mock function with given fields: ctx, TransactionID
func (_m *Repository) GetOrderDetailByTransactionID(ctx context.Context, TransactionID string) ([]*model.Order, error) {
	ret := _m.Called(ctx, TransactionID)

	var r0 []*model.Order
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.Order); ok {
		r0 = rf(ctx, TransactionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, TransactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderModelByID provides a mock function with given fields: ctx, OrderID
func (_m *Repository) GetOrderModelByID(ctx context.Context, OrderID string) (*model.OrderModel, error) {
	ret := _m.Called(ctx, OrderID)

	var r0 *model.OrderModel
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.OrderModel); ok {
		r0 = rf(ctx, OrderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OrderModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, OrderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrders provides a mock function with given fields: ctx, userID, orderStatusID, pgn
func (_m *Repository) GetOrders(ctx context.Context, userID string, orderStatusID string, pgn *pagination.Pagination) ([]*model.Order, error) {
	ret := _m.Called(ctx, userID, orderStatusID, pgn)

	var r0 []*model.Order
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *pagination.Pagination) []*model.Order); ok {
		r0 = rf(ctx, userID, orderStatusID, pgn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *pagination.Pagination) error); ok {
		r1 = rf(ctx, userID, orderStatusID, pgn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrdersByTransactionID provides a mock function with given fields: ctx, transactionID, userID
func (_m *Repository) GetOrdersByTransactionID(ctx context.Context, transactionID string, userID string) ([]*model.Order, error) {
	ret := _m.Called(ctx, transactionID, userID)

	var r0 []*model.Order
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*model.Order); ok {
		r0 = rf(ctx, transactionID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, transactionID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPasswordByID provides a mock function with given fields: ctx, id
func (_m *Repository) GetPasswordByID(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductDetailByID provides a mock function with given fields: ctx, tx, productDetailID
func (_m *Repository) GetProductDetailByID(ctx context.Context, tx postgre.Transaction, productDetailID string) (*model.ProductDetail, error) {
	ret := _m.Called(ctx, tx, productDetailID)

	var r0 *model.ProductDetail
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, string) *model.ProductDetail); ok {
		r0 = rf(ctx, tx, productDetailID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, postgre.Transaction, string) error); ok {
		r1 = rf(ctx, tx, productDetailID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductPromotionByProductID provides a mock function with given fields: ctx, productID
func (_m *Repository) GetProductPromotionByProductID(ctx context.Context, productID string) (*model.Promotion, error) {
	ret := _m.Called(ctx, productID)

	var r0 *model.Promotion
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Promotion); ok {
		r0 = rf(ctx, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Promotion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductUnitSoldByOrderID provides a mock function with given fields: ctx, tx, orderID
func (_m *Repository) GetProductUnitSoldByOrderID(ctx context.Context, tx postgre.Transaction, orderID string) ([]*body.ProductUnitSoldOrderQty, error) {
	ret := _m.Called(ctx, tx, orderID)

	var r0 []*body.ProductUnitSoldOrderQty
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, string) []*body.ProductUnitSoldOrderQty); ok {
		r0 = rf(ctx, tx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*body.ProductUnitSoldOrderQty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, postgre.Transaction, string) error); ok {
		r1 = rf(ctx, tx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRefundOrderByID provides a mock function with given fields: ctx, refundID
func (_m *Repository) GetRefundOrderByID(ctx context.Context, refundID string) (*model.Refund, error) {
	ret := _m.Called(ctx, refundID)

	var r0 *model.Refund
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Refund); ok {
		r0 = rf(ctx, refundID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Refund)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refundID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRefundOrderByOrderID provides a mock function with given fields: ctx, orderID
func (_m *Repository) GetRefundOrderByOrderID(ctx context.Context, orderID string) (*model.Refund, error) {
	ret := _m.Called(ctx, orderID)

	var r0 *model.Refund
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Refund); ok {
		r0 = rf(ctx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Refund)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRefundThreadByRefundID provides a mock function with given fields: ctx, refundID
func (_m *Repository) GetRefundThreadByRefundID(ctx context.Context, refundID string) ([]*body.RThread, error) {
	ret := _m.Called(ctx, refundID)

	var r0 []*body.RThread
	if rf, ok := ret.Get(0).(func(context.Context, string) []*body.RThread); ok {
		r0 = rf(ctx, refundID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*body.RThread)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refundID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRejectedRefund provides a mock function with given fields: ctx
func (_m *Repository) GetRejectedRefund(ctx context.Context) ([]*model.RefundOrder, error) {
	ret := _m.Called(ctx)

	var r0 []*model.RefundOrder
	if rf, ok := ret.Get(0).(func(context.Context) []*model.RefundOrder); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.RefundOrder)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSealabsPay provides a mock function with given fields: ctx, userid
func (_m *Repository) GetSealabsPay(ctx context.Context, userid string) ([]*model.SealabsPay, error) {
	ret := _m.Called(ctx, userid)

	var r0 []*model.SealabsPay
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.SealabsPay); ok {
		r0 = rf(ctx, userid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.SealabsPay)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSealabsPayUser provides a mock function with given fields: ctx, userID, CardNumber
func (_m *Repository) GetSealabsPayUser(ctx context.Context, userID string, CardNumber string) (*model.SealabsPay, error) {
	ret := _m.Called(ctx, userID, CardNumber)

	var r0 *model.SealabsPay
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.SealabsPay); ok {
		r0 = rf(ctx, userID, CardNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SealabsPay)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, CardNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSellerIDByOrderID provides a mock function with given fields: ctx, orderID
func (_m *Repository) GetSellerIDByOrderID(ctx context.Context, orderID string) (string, error) {
	ret := _m.Called(ctx, orderID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, orderID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSessionKeyRedis provides a mock function with given fields: ctx, key
func (_m *Repository) GetSessionKeyRedis(ctx context.Context, key string) ([]string, error) {
	ret := _m.Called(ctx, key)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShopByID provides a mock function with given fields: ctx, shopID
func (_m *Repository) GetShopByID(ctx context.Context, shopID string) (*model.Shop, error) {
	ret := _m.Called(ctx, shopID)

	var r0 *model.Shop
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Shop); ok {
		r0 = rf(ctx, shopID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Shop)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shopID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalAddress provides a mock function with given fields: ctx, userID, name
func (_m *Repository) GetTotalAddress(ctx context.Context, userID string, name string) (int64, error) {
	ret := _m.Called(ctx, userID, name)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int64); ok {
		r0 = rf(ctx, userID, name)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalAddressDefault provides a mock function with given fields: ctx, userID, name, isDefault, isShopDefault
func (_m *Repository) GetTotalAddressDefault(ctx context.Context, userID string, name string, isDefault bool, isShopDefault bool) (int64, error) {
	ret := _m.Called(ctx, userID, name, isDefault, isShopDefault)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool, bool) int64); ok {
		r0 = rf(ctx, userID, name, isDefault, isShopDefault)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, bool, bool) error); ok {
		r1 = rf(ctx, userID, name, isDefault, isShopDefault)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalOrder provides a mock function with given fields: ctx, userID, orderStatusID
func (_m *Repository) GetTotalOrder(ctx context.Context, userID string, orderStatusID string) (int64, error) {
	ret := _m.Called(ctx, userID, orderStatusID)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int64); ok {
		r0 = rf(ctx, userID, orderStatusID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, orderStatusID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalTransactionByUserID provides a mock function with given fields: ctx, userID, status
func (_m *Repository) GetTotalTransactionByUserID(ctx context.Context, userID string, status int) (int64, error) {
	ret := _m.Called(ctx, userID, status)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, int) int64); ok {
		r0 = rf(ctx, userID, status)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, userID, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalWalletHistoryByWalletID provides a mock function with given fields: ctx, walletID
func (_m *Repository) GetTotalWalletHistoryByWalletID(ctx context.Context, walletID string) (int64, error) {
	ret := _m.Called(ctx, walletID)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, walletID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, walletID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionByID provides a mock function with given fields: ctx, transactionID
func (_m *Repository) GetTransactionByID(ctx context.Context, transactionID string) (*model.Transaction, error) {
	ret := _m.Called(ctx, transactionID)

	var r0 *model.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Transaction); ok {
		r0 = rf(ctx, transactionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionByUserID provides a mock function with given fields: ctx, userID, status, pgn
func (_m *Repository) GetTransactionByUserID(ctx context.Context, userID string, status int, pgn *pagination.Pagination) ([]*model.Transaction, error) {
	ret := _m.Called(ctx, userID, status, pgn)

	var r0 []*model.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, string, int, *pagination.Pagination) []*model.Transaction); ok {
		r0 = rf(ctx, userID, status, pgn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int, *pagination.Pagination) error); ok {
		r1 = rf(ctx, userID, status, pgn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *Repository) GetUserByID(ctx context.Context, id string) (*model.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByPhoneNo provides a mock function with given fields: ctx, phoneNo
func (_m *Repository) GetUserByPhoneNo(ctx context.Context, phoneNo string) (*model.User, error) {
	ret := _m.Called(ctx, phoneNo)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, phoneNo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, phoneNo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUsername provides a mock function with given fields: ctx, username
func (_m *Repository) GetUserByUsername(ctx context.Context, username string) (*model.User, error) {
	ret := _m.Called(ctx, username)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserPasswordByID provides a mock function with given fields: ctx, id
func (_m *Repository) GetUserPasswordByID(ctx context.Context, id string) (*model.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoucherMarketplaceByID provides a mock function with given fields: ctx, voucherMarketplaceID
func (_m *Repository) GetVoucherMarketplaceByID(ctx context.Context, voucherMarketplaceID string) (*model.Voucher, error) {
	ret := _m.Called(ctx, voucherMarketplaceID)

	var r0 *model.Voucher
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Voucher); ok {
		r0 = rf(ctx, voucherMarketplaceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Voucher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, voucherMarketplaceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoucherShopByID provides a mock function with given fields: ctx, VoucherShopID, shopID
func (_m *Repository) GetVoucherShopByID(ctx context.Context, VoucherShopID string, shopID string) (*model.Voucher, error) {
	ret := _m.Called(ctx, VoucherShopID, shopID)

	var r0 *model.Voucher
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.Voucher); ok {
		r0 = rf(ctx, VoucherShopID, shopID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Voucher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, VoucherShopID, shopID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWalletByUserID provides a mock function with given fields: ctx, userID
func (_m *Repository) GetWalletByUserID(ctx context.Context, userID string) (*model.Wallet, error) {
	ret := _m.Called(ctx, userID)

	var r0 *model.Wallet
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Wallet); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWalletHistoryByID provides a mock function with given fields: ctx, id
func (_m *Repository) GetWalletHistoryByID(ctx context.Context, id string) (*model.WalletHistory, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.WalletHistory
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.WalletHistory); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.WalletHistory)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWalletHistoryByWalletID provides a mock function with given fields: ctx, pgn, walletID
func (_m *Repository) GetWalletHistoryByWalletID(ctx context.Context, pgn *pagination.Pagination, walletID string) ([]*body.HistoryWalletResponse, error) {
	ret := _m.Called(ctx, pgn, walletID)

	var r0 []*body.HistoryWalletResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pagination.Pagination, string) []*body.HistoryWalletResponse); ok {
		r0 = rf(ctx, pgn, walletID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*body.HistoryWalletResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pagination.Pagination, string) error); ok {
		r1 = rf(ctx, pgn, walletID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWalletUser provides a mock function with given fields: ctx, walletID
func (_m *Repository) GetWalletUser(ctx context.Context, walletID string) (*model.Wallet, error) {
	ret := _m.Called(ctx, walletID)

	var r0 *model.Wallet
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Wallet); ok {
		r0 = rf(ctx, walletID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, walletID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertCostRedis provides a mock function with given fields: ctx, key, value
func (_m *Repository) InsertCostRedis(ctx context.Context, key string, value string) error {
	ret := _m.Called(ctx, key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertNewOTPKey provides a mock function with given fields: ctx, email, otp
func (_m *Repository) InsertNewOTPKey(ctx context.Context, email string, otp string) error {
	ret := _m.Called(ctx, email, otp)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, otp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertNewOTPKeyChangeWalletPin provides a mock function with given fields: ctx, email, otp
func (_m *Repository) InsertNewOTPKeyChangeWalletPin(ctx context.Context, email string, otp string) error {
	ret := _m.Called(ctx, email, otp)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, otp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertSessionRedis provides a mock function with given fields: ctx, duration, key, status
func (_m *Repository) InsertSessionRedis(ctx context.Context, duration int, key string, status string) error {
	ret := _m.Called(ctx, duration, key, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, string) error); ok {
		r0 = rf(ctx, duration, key, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertWalletHistory provides a mock function with given fields: ctx, tx, walletHistory
func (_m *Repository) InsertWalletHistory(ctx context.Context, tx postgre.Transaction, walletHistory *model.WalletHistory) error {
	ret := _m.Called(ctx, tx, walletHistory)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, *model.WalletHistory) error); ok {
		r0 = rf(ctx, tx, walletHistory)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PatchSealabsPay provides a mock function with given fields: ctx, cardNumber
func (_m *Repository) PatchSealabsPay(ctx context.Context, cardNumber string) error {
	ret := _m.Called(ctx, cardNumber)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, cardNumber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetDefaultSealabsPay provides a mock function with given fields: ctx, cardNumber, userid
func (_m *Repository) SetDefaultSealabsPay(ctx context.Context, cardNumber string, userid string) error {
	ret := _m.Called(ctx, cardNumber, userid)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, cardNumber, userid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetDefaultSealabsPayTrans provides a mock function with given fields: ctx, tx, cardNumber
func (_m *Repository) SetDefaultSealabsPayTrans(ctx context.Context, tx postgre.Transaction, cardNumber *string) error {
	ret := _m.Called(ctx, tx, cardNumber)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, *string) error); ok {
		r0 = rf(ctx, tx, cardNumber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAddress provides a mock function with given fields: ctx, tx, address
func (_m *Repository) UpdateAddress(ctx context.Context, tx postgre.Transaction, address *model.Address) error {
	ret := _m.Called(ctx, tx, address)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, *model.Address) error); ok {
		r0 = rf(ctx, tx, address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDefaultAddress provides a mock function with given fields: ctx, tx, status, address
func (_m *Repository) UpdateDefaultAddress(ctx context.Context, tx postgre.Transaction, status bool, address *model.Address) error {
	ret := _m.Called(ctx, tx, status, address)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, bool, *model.Address) error); ok {
		r0 = rf(ctx, tx, status, address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDefaultShopAddress provides a mock function with given fields: ctx, tx, status, address
func (_m *Repository) UpdateDefaultShopAddress(ctx context.Context, tx postgre.Transaction, status bool, address *model.Address) error {
	ret := _m.Called(ctx, tx, status, address)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, bool, *model.Address) error); ok {
		r0 = rf(ctx, tx, status, address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrder provides a mock function with given fields: ctx, tx, orderData
func (_m *Repository) UpdateOrder(ctx context.Context, tx postgre.Transaction, orderData *model.OrderModel) error {
	ret := _m.Called(ctx, tx, orderData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, *model.OrderModel) error); ok {
		r0 = rf(ctx, tx, orderData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrderRefund provides a mock function with given fields: ctx, tx, orderID, isRefund
func (_m *Repository) UpdateOrderRefund(ctx context.Context, tx postgre.Transaction, orderID string, isRefund bool) error {
	ret := _m.Called(ctx, tx, orderID, isRefund)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, string, bool) error); ok {
		r0 = rf(ctx, tx, orderID, isRefund)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePasswordByID provides a mock function with given fields: ctx, userID, newPassword
func (_m *Repository) UpdatePasswordByID(ctx context.Context, userID string, newPassword string) error {
	ret := _m.Called(ctx, userID, newPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProductDetailStock provides a mock function with given fields: ctx, tx, productDetailData
func (_m *Repository) UpdateProductDetailStock(ctx context.Context, tx postgre.Transaction, productDetailData *model.ProductDetail) error {
	ret := _m.Called(ctx, tx, productDetailData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, *model.ProductDetail) error); ok {
		r0 = rf(ctx, tx, productDetailData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProductUnitSold provides a mock function with given fields: ctx, tx, productID, newQty
func (_m *Repository) UpdateProductUnitSold(ctx context.Context, tx postgre.Transaction, productID string, newQty int64) error {
	ret := _m.Called(ctx, tx, productID, newQty)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, string, int64) error); ok {
		r0 = rf(ctx, tx, productID, newQty)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProfileImage provides a mock function with given fields: ctx, imgURL, userID
func (_m *Repository) UpdateProfileImage(ctx context.Context, imgURL string, userID string) error {
	ret := _m.Called(ctx, imgURL, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, imgURL, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePromotionQuota provides a mock function with given fields: ctx, tx, promo
func (_m *Repository) UpdatePromotionQuota(ctx context.Context, tx postgre.Transaction, promo *model.Promotion) error {
	ret := _m.Called(ctx, tx, promo)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, *model.Promotion) error); ok {
		r0 = rf(ctx, tx, promo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRole provides a mock function with given fields: ctx, userID
func (_m *Repository) UpdateRole(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTransaction provides a mock function with given fields: ctx, tx, transactionData
func (_m *Repository) UpdateTransaction(ctx context.Context, tx postgre.Transaction, transactionData *model.Transaction) error {
	ret := _m.Called(ctx, tx, transactionData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, *model.Transaction) error); ok {
		r0 = rf(ctx, tx, transactionData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserEmail provides a mock function with given fields: ctx, tx, _a2
func (_m *Repository) UpdateUserEmail(ctx context.Context, tx postgre.Transaction, _a2 *model.User) error {
	ret := _m.Called(ctx, tx, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, *model.User) error); ok {
		r0 = rf(ctx, tx, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserField provides a mock function with given fields: ctx, _a1
func (_m *Repository) UpdateUserField(ctx context.Context, _a1 *model.User) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserSealabsPay provides a mock function with given fields: ctx, request, userid
func (_m *Repository) UpdateUserSealabsPay(ctx context.Context, request body.AddSealabsPayRequest, userid string) error {
	ret := _m.Called(ctx, request, userid)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, body.AddSealabsPayRequest, string) error); ok {
		r0 = rf(ctx, request, userid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserSealabsPayTrans provides a mock function with given fields: ctx, tx, request, userid
func (_m *Repository) UpdateUserSealabsPayTrans(ctx context.Context, tx postgre.Transaction, request body.AddSealabsPayRequest, userid string) error {
	ret := _m.Called(ctx, tx, request, userid)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, body.AddSealabsPayRequest, string) error); ok {
		r0 = rf(ctx, tx, request, userid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateVoucherQuota provides a mock function with given fields: ctx, tx, upVoucher
func (_m *Repository) UpdateVoucherQuota(ctx context.Context, tx postgre.Transaction, upVoucher *model.Voucher) error {
	ret := _m.Called(ctx, tx, upVoucher)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, *model.Voucher) error); ok {
		r0 = rf(ctx, tx, upVoucher)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWallet provides a mock function with given fields: ctx, wallet
func (_m *Repository) UpdateWallet(ctx context.Context, wallet *model.Wallet) error {
	ret := _m.Called(ctx, wallet)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Wallet) error); ok {
		r0 = rf(ctx, wallet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWalletBalance provides a mock function with given fields: ctx, tx, wallet
func (_m *Repository) UpdateWalletBalance(ctx context.Context, tx postgre.Transaction, wallet *model.Wallet) error {
	ret := _m.Called(ctx, tx, wallet)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgre.Transaction, *model.Wallet) error); ok {
		r0 = rf(ctx, tx, wallet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWalletPin provides a mock function with given fields: ctx, wallet
func (_m *Repository) UpdateWalletPin(ctx context.Context, wallet *model.Wallet) error {
	ret := _m.Called(ctx, wallet)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Wallet) error); ok {
		r0 = rf(ctx, wallet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
